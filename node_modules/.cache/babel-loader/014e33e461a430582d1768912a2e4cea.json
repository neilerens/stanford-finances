{"ast":null,"code":"import { raf } from 'rafz';\nexport { raf } from 'rafz';\nimport { getFluidValue } from 'fluids';\nexport * from 'fluids';\nimport { useEffect, useState, useRef } from 'react';\n\nfunction noop() {}\n\nconst defineHidden = (obj, key, value) => Object.defineProperty(obj, key, {\n  value,\n  writable: true,\n  configurable: true\n});\n\nconst is = {\n  arr: Array.isArray,\n  obj: a => !!a && a.constructor.name === \"Object\",\n  fun: a => typeof a === \"function\",\n  str: a => typeof a === \"string\",\n  num: a => typeof a === \"number\",\n  und: a => a === void 0\n};\n\nfunction isEqual(a, b) {\n  if (is.arr(a)) {\n    if (!is.arr(b) || a.length !== b.length) return false;\n\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n  }\n\n  return a === b;\n}\n\nconst each = (obj, fn) => obj.forEach(fn);\n\nfunction eachProp(obj, fn, ctx) {\n  for (const key in obj) {\n    fn.call(ctx, obj[key], key);\n  }\n}\n\nconst toArray = a => is.und(a) ? [] : is.arr(a) ? a : [a];\n\nfunction flush(queue, iterator) {\n  if (queue.size) {\n    const items = Array.from(queue);\n    queue.clear();\n    each(items, iterator);\n  }\n}\n\nconst flushCalls = function (queue) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return flush(queue, fn => fn(...args));\n};\n\nlet createStringInterpolator;\nlet to;\nlet colors = null;\nlet skipAnimation = false;\nlet willAdvance = noop;\n\nconst assign = globals => {\n  if (globals.to) to = globals.to;\n  if (globals.now) raf.now = globals.now;\n  if (globals.colors !== void 0) colors = globals.colors;\n  if (globals.skipAnimation != null) skipAnimation = globals.skipAnimation;\n  if (globals.createStringInterpolator) createStringInterpolator = globals.createStringInterpolator;\n  if (globals.requestAnimationFrame) raf.use(globals.requestAnimationFrame);\n  if (globals.batchedUpdates) raf.batchedUpdates = globals.batchedUpdates;\n  if (globals.willAdvance) willAdvance = globals.willAdvance;\n};\n\nvar globals = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n\n  get createStringInterpolator() {\n    return createStringInterpolator;\n  },\n\n  get to() {\n    return to;\n  },\n\n  get colors() {\n    return colors;\n  },\n\n  get skipAnimation() {\n    return skipAnimation;\n  },\n\n  get willAdvance() {\n    return willAdvance;\n  },\n\n  assign: assign\n});\nconst startQueue = new Set();\nlet currentFrame = [];\nlet prevFrame = [];\nlet priority = 0;\nconst frameLoop = {\n  get idle() {\n    return !startQueue.size && !currentFrame.length;\n  },\n\n  start(animation) {\n    if (priority > animation.priority) {\n      startQueue.add(animation);\n      raf.onStart(flushStartQueue);\n    } else {\n      startSafely(animation);\n      raf(advance);\n    }\n  },\n\n  advance,\n\n  sort(animation) {\n    if (priority) {\n      raf.onFrame(() => frameLoop.sort(animation));\n    } else {\n      const prevIndex = currentFrame.indexOf(animation);\n\n      if (~prevIndex) {\n        currentFrame.splice(prevIndex, 1);\n        startUnsafely(animation);\n      }\n    }\n  },\n\n  clear() {\n    currentFrame = [];\n    startQueue.clear();\n  }\n\n};\n\nfunction flushStartQueue() {\n  startQueue.forEach(startSafely);\n  startQueue.clear();\n  raf(advance);\n}\n\nfunction startSafely(animation) {\n  if (!currentFrame.includes(animation)) startUnsafely(animation);\n}\n\nfunction startUnsafely(animation) {\n  currentFrame.splice(findIndex(currentFrame, other => other.priority > animation.priority), 0, animation);\n}\n\nfunction advance(dt) {\n  const nextFrame = prevFrame;\n\n  for (let i = 0; i < currentFrame.length; i++) {\n    const animation = currentFrame[i];\n    priority = animation.priority;\n\n    if (!animation.idle) {\n      willAdvance(animation);\n      animation.advance(dt);\n\n      if (!animation.idle) {\n        nextFrame.push(animation);\n      }\n    }\n  }\n\n  priority = 0;\n  prevFrame = currentFrame;\n  prevFrame.length = 0;\n  currentFrame = nextFrame;\n  return currentFrame.length > 0;\n}\n\nfunction findIndex(arr, test) {\n  const index = arr.findIndex(test);\n  return index < 0 ? arr.length : index;\n}\n\nconst colors$1 = {\n  transparent: 0,\n  aliceblue: 4042850303,\n  antiquewhite: 4209760255,\n  aqua: 16777215,\n  aquamarine: 2147472639,\n  azure: 4043309055,\n  beige: 4126530815,\n  bisque: 4293182719,\n  black: 255,\n  blanchedalmond: 4293643775,\n  blue: 65535,\n  blueviolet: 2318131967,\n  brown: 2771004159,\n  burlywood: 3736635391,\n  burntsienna: 3934150143,\n  cadetblue: 1604231423,\n  chartreuse: 2147418367,\n  chocolate: 3530104575,\n  coral: 4286533887,\n  cornflowerblue: 1687547391,\n  cornsilk: 4294499583,\n  crimson: 3692313855,\n  cyan: 16777215,\n  darkblue: 35839,\n  darkcyan: 9145343,\n  darkgoldenrod: 3095792639,\n  darkgray: 2846468607,\n  darkgreen: 6553855,\n  darkgrey: 2846468607,\n  darkkhaki: 3182914559,\n  darkmagenta: 2332068863,\n  darkolivegreen: 1433087999,\n  darkorange: 4287365375,\n  darkorchid: 2570243327,\n  darkred: 2332033279,\n  darksalmon: 3918953215,\n  darkseagreen: 2411499519,\n  darkslateblue: 1211993087,\n  darkslategray: 793726975,\n  darkslategrey: 793726975,\n  darkturquoise: 13554175,\n  darkviolet: 2483082239,\n  deeppink: 4279538687,\n  deepskyblue: 12582911,\n  dimgray: 1768516095,\n  dimgrey: 1768516095,\n  dodgerblue: 512819199,\n  firebrick: 2988581631,\n  floralwhite: 4294635775,\n  forestgreen: 579543807,\n  fuchsia: 4278255615,\n  gainsboro: 3705462015,\n  ghostwhite: 4177068031,\n  gold: 4292280575,\n  goldenrod: 3668254975,\n  gray: 2155905279,\n  green: 8388863,\n  greenyellow: 2919182335,\n  grey: 2155905279,\n  honeydew: 4043305215,\n  hotpink: 4285117695,\n  indianred: 3445382399,\n  indigo: 1258324735,\n  ivory: 4294963455,\n  khaki: 4041641215,\n  lavender: 3873897215,\n  lavenderblush: 4293981695,\n  lawngreen: 2096890111,\n  lemonchiffon: 4294626815,\n  lightblue: 2916673279,\n  lightcoral: 4034953471,\n  lightcyan: 3774873599,\n  lightgoldenrodyellow: 4210742015,\n  lightgray: 3553874943,\n  lightgreen: 2431553791,\n  lightgrey: 3553874943,\n  lightpink: 4290167295,\n  lightsalmon: 4288707327,\n  lightseagreen: 548580095,\n  lightskyblue: 2278488831,\n  lightslategray: 2005441023,\n  lightslategrey: 2005441023,\n  lightsteelblue: 2965692159,\n  lightyellow: 4294959359,\n  lime: 16711935,\n  limegreen: 852308735,\n  linen: 4210091775,\n  magenta: 4278255615,\n  maroon: 2147483903,\n  mediumaquamarine: 1724754687,\n  mediumblue: 52735,\n  mediumorchid: 3126187007,\n  mediumpurple: 2473647103,\n  mediumseagreen: 1018393087,\n  mediumslateblue: 2070474495,\n  mediumspringgreen: 16423679,\n  mediumturquoise: 1221709055,\n  mediumvioletred: 3340076543,\n  midnightblue: 421097727,\n  mintcream: 4127193855,\n  mistyrose: 4293190143,\n  moccasin: 4293178879,\n  navajowhite: 4292783615,\n  navy: 33023,\n  oldlace: 4260751103,\n  olive: 2155872511,\n  olivedrab: 1804477439,\n  orange: 4289003775,\n  orangered: 4282712319,\n  orchid: 3664828159,\n  palegoldenrod: 4008225535,\n  palegreen: 2566625535,\n  paleturquoise: 2951671551,\n  palevioletred: 3681588223,\n  papayawhip: 4293907967,\n  peachpuff: 4292524543,\n  peru: 3448061951,\n  pink: 4290825215,\n  plum: 3718307327,\n  powderblue: 2967529215,\n  purple: 2147516671,\n  rebeccapurple: 1714657791,\n  red: 4278190335,\n  rosybrown: 3163525119,\n  royalblue: 1097458175,\n  saddlebrown: 2336560127,\n  salmon: 4202722047,\n  sandybrown: 4104413439,\n  seagreen: 780883967,\n  seashell: 4294307583,\n  sienna: 2689740287,\n  silver: 3233857791,\n  skyblue: 2278484991,\n  slateblue: 1784335871,\n  slategray: 1887473919,\n  slategrey: 1887473919,\n  snow: 4294638335,\n  springgreen: 16744447,\n  steelblue: 1182971135,\n  tan: 3535047935,\n  teal: 8421631,\n  thistle: 3636451583,\n  tomato: 4284696575,\n  turquoise: 1088475391,\n  violet: 4001558271,\n  wheat: 4125012991,\n  white: 4294967295,\n  whitesmoke: 4126537215,\n  yellow: 4294902015,\n  yellowgreen: 2597139199\n};\nconst NUMBER = \"[-+]?\\\\d*\\\\.?\\\\d+\";\nconst PERCENTAGE = NUMBER + \"%\";\n\nfunction call() {\n  for (var _len2 = arguments.length, parts = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    parts[_key2] = arguments[_key2];\n  }\n\n  return \"\\\\(\\\\s*(\" + parts.join(\")\\\\s*,\\\\s*(\") + \")\\\\s*\\\\)\";\n}\n\nconst rgb = new RegExp(\"rgb\" + call(NUMBER, NUMBER, NUMBER));\nconst rgba = new RegExp(\"rgba\" + call(NUMBER, NUMBER, NUMBER, NUMBER));\nconst hsl = new RegExp(\"hsl\" + call(NUMBER, PERCENTAGE, PERCENTAGE));\nconst hsla = new RegExp(\"hsla\" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\nconst hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nconst hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nconst hex6 = /^#([0-9a-fA-F]{6})$/;\nconst hex8 = /^#([0-9a-fA-F]{8})$/;\n\nfunction normalizeColor(color) {\n  let match;\n\n  if (typeof color === \"number\") {\n    return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;\n  }\n\n  if (match = hex6.exec(color)) return parseInt(match[1] + \"ff\", 16) >>> 0;\n\n  if (colors && colors[color] !== void 0) {\n    return colors[color];\n  }\n\n  if (match = rgb.exec(color)) {\n    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;\n  }\n\n  if (match = rgba.exec(color)) {\n    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;\n  }\n\n  if (match = hex3.exec(color)) {\n    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + \"ff\", 16) >>> 0;\n  }\n\n  if (match = hex8.exec(color)) return parseInt(match[1], 16) >>> 0;\n\n  if (match = hex4.exec(color)) {\n    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;\n  }\n\n  if (match = hsl.exec(color)) {\n    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;\n  }\n\n  if (match = hsla.exec(color)) {\n    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;\n  }\n\n  return null;\n}\n\nfunction hue2rgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\n\nfunction hslToRgb(h, s, l) {\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n  const r = hue2rgb(p, q, h + 1 / 3);\n  const g = hue2rgb(p, q, h);\n  const b = hue2rgb(p, q, h - 1 / 3);\n  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\n\nfunction parse255(str) {\n  const int = parseInt(str, 10);\n  if (int < 0) return 0;\n  if (int > 255) return 255;\n  return int;\n}\n\nfunction parse360(str) {\n  const int = parseFloat(str);\n  return (int % 360 + 360) % 360 / 360;\n}\n\nfunction parse1(str) {\n  const num = parseFloat(str);\n  if (num < 0) return 0;\n  if (num > 1) return 255;\n  return Math.round(num * 255);\n}\n\nfunction parsePercentage(str) {\n  const int = parseFloat(str);\n  if (int < 0) return 0;\n  if (int > 100) return 1;\n  return int / 100;\n}\n\nfunction colorToRgba(input) {\n  let int32Color = normalizeColor(input);\n  if (int32Color === null) return input;\n  int32Color = int32Color || 0;\n  let r = (int32Color & 4278190080) >>> 24;\n  let g = (int32Color & 16711680) >>> 16;\n  let b = (int32Color & 65280) >>> 8;\n  let a = (int32Color & 255) / 255;\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst createInterpolator = (range, output, extrapolate) => {\n  if (is.fun(range)) {\n    return range;\n  }\n\n  if (is.arr(range)) {\n    return createInterpolator({\n      range,\n      output,\n      extrapolate\n    });\n  }\n\n  if (is.str(range.output[0])) {\n    return createStringInterpolator(range);\n  }\n\n  const config = range;\n  const outputRange = config.output;\n  const inputRange = config.range || [0, 1];\n  const extrapolateLeft = config.extrapolateLeft || config.extrapolate || \"extend\";\n  const extrapolateRight = config.extrapolateRight || config.extrapolate || \"extend\";\n\n  const easing = config.easing || (t => t);\n\n  return input => {\n    const range2 = findRange(input, inputRange);\n    return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config.map);\n  };\n};\n\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {\n  let result = map ? map(input) : input;\n\n  if (result < inputMin) {\n    if (extrapolateLeft === \"identity\") return result;else if (extrapolateLeft === \"clamp\") result = inputMin;\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === \"identity\") return result;else if (extrapolateRight === \"clamp\") result = inputMax;\n  }\n\n  if (outputMin === outputMax) return outputMin;\n  if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax;\n  if (inputMin === -Infinity) result = -result;else if (inputMax === Infinity) result = result - inputMin;else result = (result - inputMin) / (inputMax - inputMin);\n  result = easing(result);\n  if (outputMin === -Infinity) result = -result;else if (outputMax === Infinity) result = result + outputMin;else result = result * (outputMax - outputMin) + outputMin;\n  return result;\n}\n\nfunction findRange(input, inputRange) {\n  for (var i = 1; i < inputRange.length - 1; ++i) if (inputRange[i] >= input) break;\n\n  return i - 1;\n}\n\nconst numberRegex = /[+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\nconst colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d\\.]+%?\\))/gi;\nlet namedColorRegex;\nconst rgbaRegex = /rgba\\(([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+)\\)/gi;\n\nconst rgbaRound = (_, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;\n\nconst createStringInterpolator$1 = config => {\n  if (!namedColorRegex) namedColorRegex = colors ? new RegExp(`(${Object.keys(colors).join(\"|\")})`, \"g\") : /^\\b$/;\n  const output = config.output.map(value => getFluidValue(value).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba));\n  const keyframes = output.map(value => value.match(numberRegex).map(Number));\n  const outputRanges = keyframes[0].map((_, i) => keyframes.map(values => {\n    if (!(i in values)) {\n      throw Error('The arity of each \"output\" value must be equal');\n    }\n\n    return values[i];\n  }));\n  const interpolators = outputRanges.map(output2 => createInterpolator({ ...config,\n    output: output2\n  }));\n  return input => {\n    let i = 0;\n    return output[0].replace(numberRegex, () => String(interpolators[i++](input))).replace(rgbaRegex, rgbaRound);\n  };\n};\n\nconst prefix = \"react-spring: \";\nlet flagInterpolate = false;\n\nfunction deprecateInterpolate() {\n  if (!flagInterpolate) {\n    flagInterpolate = true;\n    console.warn(prefix + 'The \"interpolate\" function is deprecated in v9 (use \"to\" instead)');\n  }\n}\n\nfunction isAnimatedString(value) {\n  return is.str(value) && (value[0] == \"#\" || /\\d/.test(value) || value in (colors || {}));\n}\n\nconst useOnce = effect => useEffect(effect, emptyDeps);\n\nconst emptyDeps = [];\n\nfunction useForceUpdate() {\n  const update = useState()[1];\n  const mounted = useState(makeMountedRef)[0];\n  useOnce(mounted.unmount);\n  return () => {\n    if (mounted.current) {\n      update({});\n    }\n  };\n}\n\nfunction makeMountedRef() {\n  const mounted = {\n    current: true,\n    unmount: () => () => {\n      mounted.current = false;\n    }\n  };\n  return mounted;\n}\n\nfunction useMemoOne(getResult, inputs) {\n  const [initial] = useState(() => ({\n    inputs,\n    result: getResult()\n  }));\n  const committed = useRef();\n  const prevCache = committed.current;\n  let cache = prevCache;\n\n  if (cache) {\n    const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));\n\n    if (!useCache) {\n      cache = {\n        inputs,\n        result: getResult()\n      };\n    }\n  } else {\n    cache = initial;\n  }\n\n  useEffect(() => {\n    committed.current = cache;\n\n    if (prevCache == initial) {\n      initial.inputs = initial.result = void 0;\n    }\n  }, [cache]);\n  return cache.result;\n}\n\nfunction areInputsEqual(next, prev) {\n  if (next.length !== prev.length) {\n    return false;\n  }\n\n  for (let i = 0; i < next.length; i++) {\n    if (next[i] !== prev[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction usePrev(value) {\n  const prevRef = useRef();\n  useEffect(() => {\n    prevRef.current = value;\n  });\n  return prevRef.current;\n}\n\nexport { globals as Globals, colorToRgba, colors$1 as colors, createInterpolator, createStringInterpolator$1 as createStringInterpolator, defineHidden, deprecateInterpolate, each, eachProp, flush, flushCalls, frameLoop, hex3, hex4, hex6, hex8, hsl, hsla, is, isAnimatedString, isEqual, noop, rgb, rgba, toArray, useForceUpdate, useMemoOne, useOnce, usePrev };","map":{"version":3,"sources":["src/helpers.ts","src/globals.ts","src/FrameLoop.ts","src/colors.ts","src/colorMatchers.ts","src/normalizeColor.ts","src/colorToRgba.ts","src/createInterpolator.ts","src/stringInterpolation.ts","src/deprecations.ts","src/isAnimatedString.ts","src/hooks/useOnce.ts","src/hooks/useForceUpdate.ts","src/hooks/useMemoOne.ts","src/hooks/usePrev.ts"],"names":["colors","matchers.hex6","G.colors","matchers.rgb","matchers.rgba","matchers.hex3","matchers.hex8","matchers.hex4","matchers.hsl","matchers.hsla","normalizeColor2","G.createStringInterpolator","colorToRgba2","createInterpolator2"],"mappings":"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","sourcesContent":["import { raf } from 'rafz';\nexport { raf } from 'rafz';\nimport { getFluidValue } from 'fluids';\nexport * from 'fluids';\nimport { useEffect, useState, useRef } from 'react';\n\nfunction noop() {\n}\nconst defineHidden = (obj, key, value) => Object.defineProperty(obj, key, {value, writable: true, configurable: true});\nconst is = {\n  arr: Array.isArray,\n  obj: (a) => !!a && a.constructor.name === \"Object\",\n  fun: (a) => typeof a === \"function\",\n  str: (a) => typeof a === \"string\",\n  num: (a) => typeof a === \"number\",\n  und: (a) => a === void 0\n};\nfunction isEqual(a, b) {\n  if (is.arr(a)) {\n    if (!is.arr(b) || a.length !== b.length)\n      return false;\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] !== b[i])\n        return false;\n    }\n    return true;\n  }\n  return a === b;\n}\nconst each = (obj, fn) => obj.forEach(fn);\nfunction eachProp(obj, fn, ctx) {\n  for (const key in obj) {\n    fn.call(ctx, obj[key], key);\n  }\n}\nconst toArray = (a) => is.und(a) ? [] : is.arr(a) ? a : [a];\nfunction flush(queue, iterator) {\n  if (queue.size) {\n    const items = Array.from(queue);\n    queue.clear();\n    each(items, iterator);\n  }\n}\nconst flushCalls = (queue, ...args) => flush(queue, (fn) => fn(...args));\n\nlet createStringInterpolator;\nlet to;\nlet colors = null;\nlet skipAnimation = false;\nlet willAdvance = noop;\nconst assign = (globals) => {\n  if (globals.to)\n    to = globals.to;\n  if (globals.now)\n    raf.now = globals.now;\n  if (globals.colors !== void 0)\n    colors = globals.colors;\n  if (globals.skipAnimation != null)\n    skipAnimation = globals.skipAnimation;\n  if (globals.createStringInterpolator)\n    createStringInterpolator = globals.createStringInterpolator;\n  if (globals.requestAnimationFrame)\n    raf.use(globals.requestAnimationFrame);\n  if (globals.batchedUpdates)\n    raf.batchedUpdates = globals.batchedUpdates;\n  if (globals.willAdvance)\n    willAdvance = globals.willAdvance;\n};\n\nvar globals = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  get createStringInterpolator () { return createStringInterpolator; },\n  get to () { return to; },\n  get colors () { return colors; },\n  get skipAnimation () { return skipAnimation; },\n  get willAdvance () { return willAdvance; },\n  assign: assign\n});\n\nconst startQueue = new Set();\nlet currentFrame = [];\nlet prevFrame = [];\nlet priority = 0;\nconst frameLoop = {\n  get idle() {\n    return !startQueue.size && !currentFrame.length;\n  },\n  start(animation) {\n    if (priority > animation.priority) {\n      startQueue.add(animation);\n      raf.onStart(flushStartQueue);\n    } else {\n      startSafely(animation);\n      raf(advance);\n    }\n  },\n  advance,\n  sort(animation) {\n    if (priority) {\n      raf.onFrame(() => frameLoop.sort(animation));\n    } else {\n      const prevIndex = currentFrame.indexOf(animation);\n      if (~prevIndex) {\n        currentFrame.splice(prevIndex, 1);\n        startUnsafely(animation);\n      }\n    }\n  },\n  clear() {\n    currentFrame = [];\n    startQueue.clear();\n  }\n};\nfunction flushStartQueue() {\n  startQueue.forEach(startSafely);\n  startQueue.clear();\n  raf(advance);\n}\nfunction startSafely(animation) {\n  if (!currentFrame.includes(animation))\n    startUnsafely(animation);\n}\nfunction startUnsafely(animation) {\n  currentFrame.splice(findIndex(currentFrame, (other) => other.priority > animation.priority), 0, animation);\n}\nfunction advance(dt) {\n  const nextFrame = prevFrame;\n  for (let i = 0; i < currentFrame.length; i++) {\n    const animation = currentFrame[i];\n    priority = animation.priority;\n    if (!animation.idle) {\n      willAdvance(animation);\n      animation.advance(dt);\n      if (!animation.idle) {\n        nextFrame.push(animation);\n      }\n    }\n  }\n  priority = 0;\n  prevFrame = currentFrame;\n  prevFrame.length = 0;\n  currentFrame = nextFrame;\n  return currentFrame.length > 0;\n}\nfunction findIndex(arr, test) {\n  const index = arr.findIndex(test);\n  return index < 0 ? arr.length : index;\n}\n\nconst colors$1 = {\n  transparent: 0,\n  aliceblue: 4042850303,\n  antiquewhite: 4209760255,\n  aqua: 16777215,\n  aquamarine: 2147472639,\n  azure: 4043309055,\n  beige: 4126530815,\n  bisque: 4293182719,\n  black: 255,\n  blanchedalmond: 4293643775,\n  blue: 65535,\n  blueviolet: 2318131967,\n  brown: 2771004159,\n  burlywood: 3736635391,\n  burntsienna: 3934150143,\n  cadetblue: 1604231423,\n  chartreuse: 2147418367,\n  chocolate: 3530104575,\n  coral: 4286533887,\n  cornflowerblue: 1687547391,\n  cornsilk: 4294499583,\n  crimson: 3692313855,\n  cyan: 16777215,\n  darkblue: 35839,\n  darkcyan: 9145343,\n  darkgoldenrod: 3095792639,\n  darkgray: 2846468607,\n  darkgreen: 6553855,\n  darkgrey: 2846468607,\n  darkkhaki: 3182914559,\n  darkmagenta: 2332068863,\n  darkolivegreen: 1433087999,\n  darkorange: 4287365375,\n  darkorchid: 2570243327,\n  darkred: 2332033279,\n  darksalmon: 3918953215,\n  darkseagreen: 2411499519,\n  darkslateblue: 1211993087,\n  darkslategray: 793726975,\n  darkslategrey: 793726975,\n  darkturquoise: 13554175,\n  darkviolet: 2483082239,\n  deeppink: 4279538687,\n  deepskyblue: 12582911,\n  dimgray: 1768516095,\n  dimgrey: 1768516095,\n  dodgerblue: 512819199,\n  firebrick: 2988581631,\n  floralwhite: 4294635775,\n  forestgreen: 579543807,\n  fuchsia: 4278255615,\n  gainsboro: 3705462015,\n  ghostwhite: 4177068031,\n  gold: 4292280575,\n  goldenrod: 3668254975,\n  gray: 2155905279,\n  green: 8388863,\n  greenyellow: 2919182335,\n  grey: 2155905279,\n  honeydew: 4043305215,\n  hotpink: 4285117695,\n  indianred: 3445382399,\n  indigo: 1258324735,\n  ivory: 4294963455,\n  khaki: 4041641215,\n  lavender: 3873897215,\n  lavenderblush: 4293981695,\n  lawngreen: 2096890111,\n  lemonchiffon: 4294626815,\n  lightblue: 2916673279,\n  lightcoral: 4034953471,\n  lightcyan: 3774873599,\n  lightgoldenrodyellow: 4210742015,\n  lightgray: 3553874943,\n  lightgreen: 2431553791,\n  lightgrey: 3553874943,\n  lightpink: 4290167295,\n  lightsalmon: 4288707327,\n  lightseagreen: 548580095,\n  lightskyblue: 2278488831,\n  lightslategray: 2005441023,\n  lightslategrey: 2005441023,\n  lightsteelblue: 2965692159,\n  lightyellow: 4294959359,\n  lime: 16711935,\n  limegreen: 852308735,\n  linen: 4210091775,\n  magenta: 4278255615,\n  maroon: 2147483903,\n  mediumaquamarine: 1724754687,\n  mediumblue: 52735,\n  mediumorchid: 3126187007,\n  mediumpurple: 2473647103,\n  mediumseagreen: 1018393087,\n  mediumslateblue: 2070474495,\n  mediumspringgreen: 16423679,\n  mediumturquoise: 1221709055,\n  mediumvioletred: 3340076543,\n  midnightblue: 421097727,\n  mintcream: 4127193855,\n  mistyrose: 4293190143,\n  moccasin: 4293178879,\n  navajowhite: 4292783615,\n  navy: 33023,\n  oldlace: 4260751103,\n  olive: 2155872511,\n  olivedrab: 1804477439,\n  orange: 4289003775,\n  orangered: 4282712319,\n  orchid: 3664828159,\n  palegoldenrod: 4008225535,\n  palegreen: 2566625535,\n  paleturquoise: 2951671551,\n  palevioletred: 3681588223,\n  papayawhip: 4293907967,\n  peachpuff: 4292524543,\n  peru: 3448061951,\n  pink: 4290825215,\n  plum: 3718307327,\n  powderblue: 2967529215,\n  purple: 2147516671,\n  rebeccapurple: 1714657791,\n  red: 4278190335,\n  rosybrown: 3163525119,\n  royalblue: 1097458175,\n  saddlebrown: 2336560127,\n  salmon: 4202722047,\n  sandybrown: 4104413439,\n  seagreen: 780883967,\n  seashell: 4294307583,\n  sienna: 2689740287,\n  silver: 3233857791,\n  skyblue: 2278484991,\n  slateblue: 1784335871,\n  slategray: 1887473919,\n  slategrey: 1887473919,\n  snow: 4294638335,\n  springgreen: 16744447,\n  steelblue: 1182971135,\n  tan: 3535047935,\n  teal: 8421631,\n  thistle: 3636451583,\n  tomato: 4284696575,\n  turquoise: 1088475391,\n  violet: 4001558271,\n  wheat: 4125012991,\n  white: 4294967295,\n  whitesmoke: 4126537215,\n  yellow: 4294902015,\n  yellowgreen: 2597139199\n};\n\nconst NUMBER = \"[-+]?\\\\d*\\\\.?\\\\d+\";\nconst PERCENTAGE = NUMBER + \"%\";\nfunction call(...parts) {\n  return \"\\\\(\\\\s*(\" + parts.join(\")\\\\s*,\\\\s*(\") + \")\\\\s*\\\\)\";\n}\nconst rgb = new RegExp(\"rgb\" + call(NUMBER, NUMBER, NUMBER));\nconst rgba = new RegExp(\"rgba\" + call(NUMBER, NUMBER, NUMBER, NUMBER));\nconst hsl = new RegExp(\"hsl\" + call(NUMBER, PERCENTAGE, PERCENTAGE));\nconst hsla = new RegExp(\"hsla\" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\nconst hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nconst hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nconst hex6 = /^#([0-9a-fA-F]{6})$/;\nconst hex8 = /^#([0-9a-fA-F]{8})$/;\n\nfunction normalizeColor(color) {\n  let match;\n  if (typeof color === \"number\") {\n    return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;\n  }\n  if (match = hex6.exec(color))\n    return parseInt(match[1] + \"ff\", 16) >>> 0;\n  if (colors && colors[color] !== void 0) {\n    return colors[color];\n  }\n  if (match = rgb.exec(color)) {\n    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;\n  }\n  if (match = rgba.exec(color)) {\n    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;\n  }\n  if (match = hex3.exec(color)) {\n    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + \"ff\", 16) >>> 0;\n  }\n  if (match = hex8.exec(color))\n    return parseInt(match[1], 16) >>> 0;\n  if (match = hex4.exec(color)) {\n    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;\n  }\n  if (match = hsl.exec(color)) {\n    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;\n  }\n  if (match = hsla.exec(color)) {\n    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;\n  }\n  return null;\n}\nfunction hue2rgb(p, q, t) {\n  if (t < 0)\n    t += 1;\n  if (t > 1)\n    t -= 1;\n  if (t < 1 / 6)\n    return p + (q - p) * 6 * t;\n  if (t < 1 / 2)\n    return q;\n  if (t < 2 / 3)\n    return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\nfunction hslToRgb(h, s, l) {\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n  const r = hue2rgb(p, q, h + 1 / 3);\n  const g = hue2rgb(p, q, h);\n  const b = hue2rgb(p, q, h - 1 / 3);\n  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\nfunction parse255(str) {\n  const int = parseInt(str, 10);\n  if (int < 0)\n    return 0;\n  if (int > 255)\n    return 255;\n  return int;\n}\nfunction parse360(str) {\n  const int = parseFloat(str);\n  return (int % 360 + 360) % 360 / 360;\n}\nfunction parse1(str) {\n  const num = parseFloat(str);\n  if (num < 0)\n    return 0;\n  if (num > 1)\n    return 255;\n  return Math.round(num * 255);\n}\nfunction parsePercentage(str) {\n  const int = parseFloat(str);\n  if (int < 0)\n    return 0;\n  if (int > 100)\n    return 1;\n  return int / 100;\n}\n\nfunction colorToRgba(input) {\n  let int32Color = normalizeColor(input);\n  if (int32Color === null)\n    return input;\n  int32Color = int32Color || 0;\n  let r = (int32Color & 4278190080) >>> 24;\n  let g = (int32Color & 16711680) >>> 16;\n  let b = (int32Color & 65280) >>> 8;\n  let a = (int32Color & 255) / 255;\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst createInterpolator = (range, output, extrapolate) => {\n  if (is.fun(range)) {\n    return range;\n  }\n  if (is.arr(range)) {\n    return createInterpolator({\n      range,\n      output,\n      extrapolate\n    });\n  }\n  if (is.str(range.output[0])) {\n    return createStringInterpolator(range);\n  }\n  const config = range;\n  const outputRange = config.output;\n  const inputRange = config.range || [0, 1];\n  const extrapolateLeft = config.extrapolateLeft || config.extrapolate || \"extend\";\n  const extrapolateRight = config.extrapolateRight || config.extrapolate || \"extend\";\n  const easing = config.easing || ((t) => t);\n  return (input) => {\n    const range2 = findRange(input, inputRange);\n    return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config.map);\n  };\n};\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {\n  let result = map ? map(input) : input;\n  if (result < inputMin) {\n    if (extrapolateLeft === \"identity\")\n      return result;\n    else if (extrapolateLeft === \"clamp\")\n      result = inputMin;\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === \"identity\")\n      return result;\n    else if (extrapolateRight === \"clamp\")\n      result = inputMax;\n  }\n  if (outputMin === outputMax)\n    return outputMin;\n  if (inputMin === inputMax)\n    return input <= inputMin ? outputMin : outputMax;\n  if (inputMin === -Infinity)\n    result = -result;\n  else if (inputMax === Infinity)\n    result = result - inputMin;\n  else\n    result = (result - inputMin) / (inputMax - inputMin);\n  result = easing(result);\n  if (outputMin === -Infinity)\n    result = -result;\n  else if (outputMax === Infinity)\n    result = result + outputMin;\n  else\n    result = result * (outputMax - outputMin) + outputMin;\n  return result;\n}\nfunction findRange(input, inputRange) {\n  for (var i = 1; i < inputRange.length - 1; ++i)\n    if (inputRange[i] >= input)\n      break;\n  return i - 1;\n}\n\nconst numberRegex = /[+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\nconst colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d\\.]+%?\\))/gi;\nlet namedColorRegex;\nconst rgbaRegex = /rgba\\(([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+)\\)/gi;\nconst rgbaRound = (_, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;\nconst createStringInterpolator$1 = (config) => {\n  if (!namedColorRegex)\n    namedColorRegex = colors ? new RegExp(`(${Object.keys(colors).join(\"|\")})`, \"g\") : /^\\b$/;\n  const output = config.output.map((value) => getFluidValue(value).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba));\n  const keyframes = output.map((value) => value.match(numberRegex).map(Number));\n  const outputRanges = keyframes[0].map((_, i) => keyframes.map((values) => {\n    if (!(i in values)) {\n      throw Error('The arity of each \"output\" value must be equal');\n    }\n    return values[i];\n  }));\n  const interpolators = outputRanges.map((output2) => createInterpolator({...config, output: output2}));\n  return (input) => {\n    let i = 0;\n    return output[0].replace(numberRegex, () => String(interpolators[i++](input))).replace(rgbaRegex, rgbaRound);\n  };\n};\n\nconst prefix = \"react-spring: \";\nlet flagInterpolate = false;\nfunction deprecateInterpolate() {\n  if (!flagInterpolate) {\n    flagInterpolate = true;\n    console.warn(prefix + 'The \"interpolate\" function is deprecated in v9 (use \"to\" instead)');\n  }\n}\n\nfunction isAnimatedString(value) {\n  return is.str(value) && (value[0] == \"#\" || /\\d/.test(value) || value in (colors || {}));\n}\n\nconst useOnce = (effect) => useEffect(effect, emptyDeps);\nconst emptyDeps = [];\n\nfunction useForceUpdate() {\n  const update = useState()[1];\n  const mounted = useState(makeMountedRef)[0];\n  useOnce(mounted.unmount);\n  return () => {\n    if (mounted.current) {\n      update({});\n    }\n  };\n}\nfunction makeMountedRef() {\n  const mounted = {\n    current: true,\n    unmount: () => () => {\n      mounted.current = false;\n    }\n  };\n  return mounted;\n}\n\nfunction useMemoOne(getResult, inputs) {\n  const [initial] = useState(() => ({\n    inputs,\n    result: getResult()\n  }));\n  const committed = useRef();\n  const prevCache = committed.current;\n  let cache = prevCache;\n  if (cache) {\n    const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));\n    if (!useCache) {\n      cache = {\n        inputs,\n        result: getResult()\n      };\n    }\n  } else {\n    cache = initial;\n  }\n  useEffect(() => {\n    committed.current = cache;\n    if (prevCache == initial) {\n      initial.inputs = initial.result = void 0;\n    }\n  }, [cache]);\n  return cache.result;\n}\nfunction areInputsEqual(next, prev) {\n  if (next.length !== prev.length) {\n    return false;\n  }\n  for (let i = 0; i < next.length; i++) {\n    if (next[i] !== prev[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction usePrev(value) {\n  const prevRef = useRef();\n  useEffect(() => {\n    prevRef.current = value;\n  });\n  return prevRef.current;\n}\n\nexport { globals as Globals, colorToRgba, colors$1 as colors, createInterpolator, createStringInterpolator$1 as createStringInterpolator, defineHidden, deprecateInterpolate, each, eachProp, flush, flushCalls, frameLoop, hex3, hex4, hex6, hex8, hsl, hsla, is, isAnimatedString, isEqual, noop, rgb, rgba, toArray, useForceUpdate, useMemoOne, useOnce, usePrev };\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"module"}