{"ast":null,"code":"import { useLayoutEffect } from 'react-layout-effect';\nimport { eachProp, is, toArray, isAnimatedString, Globals, getFluidValue, each, raf, flush, FluidValue, deprecateInterpolate, callFluidObservers, frameLoop, hasFluidValue, flushCalls, isEqual, getFluidObservers, addFluidObserver, removeFluidObserver, noop, useMemoOne, useForceUpdate, usePrev, useOnce, createInterpolator, createStringInterpolator } from '@react-spring/shared';\nexport { Globals, createInterpolator } from '@react-spring/shared';\nimport { useContext, createElement, createContext, useMemo, useRef, useState, Fragment } from 'react';\nimport { getAnimated, AnimatedValue, getPayload, AnimatedString, getAnimatedType, setAnimated } from '@react-spring/animated';\nexport * from '@react-spring/types/animated';\nexport * from '@react-spring/types/interpolation';\n\nfunction callProp(value) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return is.fun(value) ? value(...args) : value;\n}\n\nconst matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));\n\nconst resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;\n\nconst getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;\n\nconst noopTransform = value => value;\n\nconst getDefaultProps = function (props) {\n  let transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noopTransform;\n  let keys = DEFAULT_PROPS;\n\n  if (props.default && props.default !== true) {\n    props = props.default;\n    keys = Object.keys(props);\n  }\n\n  const defaults = {};\n\n  for (const key of keys) {\n    const value = transform(props[key], key);\n\n    if (!is.und(value)) {\n      defaults[key] = value;\n    }\n  }\n\n  return defaults;\n};\n\nconst DEFAULT_PROPS = [\"config\", \"onProps\", \"onStart\", \"onChange\", \"onPause\", \"onResume\", \"onRest\"];\nconst RESERVED_PROPS = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onPause: 1,\n  onResume: 1,\n  onRest: 1,\n  onResolve: 1,\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  onDestroyed: 1,\n  keys: 1,\n  callId: 1,\n  parentId: 1\n};\n\nfunction getForwardProps(props) {\n  const forward = {};\n  let count = 0;\n  eachProp(props, (value, prop) => {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value;\n      count++;\n    }\n  });\n\n  if (count) {\n    return forward;\n  }\n}\n\nfunction inferTo(props) {\n  const to = getForwardProps(props);\n\n  if (to) {\n    const out = {\n      to\n    };\n    eachProp(props, (val, key) => key in to || (out[key] = val));\n    return out;\n  }\n\n  return { ...props\n  };\n}\n\nfunction computeGoal(value) {\n  value = getFluidValue(value);\n  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? Globals.createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\n\nfunction hasProps(props) {\n  for (const _ in props) return true;\n\n  return false;\n}\n\nfunction isAsyncTo(to) {\n  return is.fun(to) || is.arr(to) && is.obj(to[0]);\n}\n\nfunction detachRefs(ctrl, ref) {\n  var _a;\n\n  (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);\n  ref == null ? void 0 : ref.delete(ctrl);\n}\n\nfunction replaceRef(ctrl, ref) {\n  var _a;\n\n  if (ref && ctrl.ref !== ref) {\n    (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);\n    ref.add(ctrl);\n    ctrl.ref = ref;\n  }\n}\n\nfunction useChain(refs, timeSteps) {\n  let timeFrame = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;\n  useLayoutEffect(() => {\n    if (timeSteps) {\n      let prevDelay = 0;\n      each(refs, (ref, i) => {\n        const controllers = ref.current;\n\n        if (controllers.length) {\n          let delay = timeFrame * timeSteps[i];\n          if (isNaN(delay)) delay = prevDelay;else prevDelay = delay;\n          each(controllers, ctrl => {\n            each(ctrl.queue, props => {\n              props.delay = key => delay + callProp(props.delay || 0, key);\n            });\n            ctrl.start();\n          });\n        }\n      });\n    } else {\n      let p = Promise.resolve();\n      each(refs, ref => {\n        const controllers = ref.current;\n\n        if (controllers.length) {\n          const queues = controllers.map(ctrl => {\n            const q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          });\n          p = p.then(() => {\n            each(controllers, (ctrl, i) => each(queues[i] || [], update => ctrl.queue.push(update)));\n            return ref.start();\n          });\n        }\n      });\n    }\n  });\n}\n\nconst config = {\n  default: {\n    tension: 170,\n    friction: 26\n  },\n  gentle: {\n    tension: 120,\n    friction: 14\n  },\n  wobbly: {\n    tension: 180,\n    friction: 12\n  },\n  stiff: {\n    tension: 210,\n    friction: 20\n  },\n  slow: {\n    tension: 280,\n    friction: 60\n  },\n  molasses: {\n    tension: 280,\n    friction: 120\n  }\n};\n\nconst linear = t => t;\n\nconst defaults = { ...config.default,\n  mass: 1,\n  damping: 1,\n  easing: linear,\n  clamp: false\n};\n\nclass AnimationConfig {\n  constructor() {\n    this.velocity = 0;\n    Object.assign(this, defaults);\n  }\n\n}\n\nfunction mergeConfig(config, newConfig, defaultConfig) {\n  if (defaultConfig) {\n    defaultConfig = { ...defaultConfig\n    };\n    sanitizeConfig(defaultConfig, newConfig);\n    newConfig = { ...defaultConfig,\n      ...newConfig\n    };\n  }\n\n  sanitizeConfig(config, newConfig);\n  Object.assign(config, newConfig);\n\n  for (const key in defaults) {\n    if (config[key] == null) {\n      config[key] = defaults[key];\n    }\n  }\n\n  let {\n    mass,\n    frequency,\n    damping\n  } = config;\n\n  if (!is.und(frequency)) {\n    if (frequency < 0.01) frequency = 0.01;\n    if (damping < 0) damping = 0;\n    config.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n    config.friction = 4 * Math.PI * damping * mass / frequency;\n  }\n\n  return config;\n}\n\nfunction sanitizeConfig(config, props) {\n  if (!is.und(props.decay)) {\n    config.duration = void 0;\n  } else {\n    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);\n\n    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {\n      config.duration = void 0;\n      config.decay = void 0;\n    }\n\n    if (isTensionConfig) {\n      config.frequency = void 0;\n    }\n  }\n}\n\nconst emptyArray = [];\n\nclass Animation {\n  constructor() {\n    this.changed = false;\n    this.values = emptyArray;\n    this.toValues = null;\n    this.fromValues = emptyArray;\n    this.config = new AnimationConfig();\n    this.immediate = false;\n  }\n\n}\n\nfunction scheduleProps(callId, _ref) {\n  let {\n    key,\n    props,\n    defaultProps,\n    state,\n    actions\n  } = _ref;\n  return new Promise((resolve, reject) => {\n    var _a;\n\n    let delay;\n    let timeout;\n    let cancel = matchProp((_a = props.cancel) != null ? _a : defaultProps == null ? void 0 : defaultProps.cancel, key);\n\n    if (cancel) {\n      onStart();\n    } else {\n      if (!is.und(props.pause)) {\n        state.paused = matchProp(props.pause, key);\n      }\n\n      let pause = defaultProps == null ? void 0 : defaultProps.pause;\n\n      if (pause !== true) {\n        pause = state.paused || matchProp(pause, key);\n      }\n\n      delay = callProp(props.delay || 0, key);\n\n      if (pause) {\n        state.resumeQueue.add(onResume);\n        actions.pause();\n      } else {\n        actions.resume();\n        onResume();\n      }\n    }\n\n    function onPause() {\n      state.resumeQueue.add(onResume);\n      state.timeouts.delete(timeout);\n      timeout.cancel();\n      delay = timeout.time - raf.now();\n    }\n\n    function onResume() {\n      if (delay > 0) {\n        timeout = raf.setTimeout(onStart, delay);\n        state.pauseQueue.add(onPause);\n        state.timeouts.add(timeout);\n      } else {\n        onStart();\n      }\n    }\n\n    function onStart() {\n      state.pauseQueue.delete(onPause);\n      state.timeouts.delete(timeout);\n\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true;\n      }\n\n      try {\n        actions.start({ ...props,\n          callId,\n          cancel\n        }, resolve);\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n}\n\nconst getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some(result => result.cancelled) ? getCancelledResult(target) : results.every(result => result.noop) ? getNoopResult(target) : getFinishedResult(target, results.every(result => result.finished));\n\nconst getNoopResult = function (target) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : target.get();\n  return {\n    value,\n    noop: true,\n    finished: true,\n    target\n  };\n};\n\nconst getFinishedResult = function (target, finished) {\n  let value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : target.get();\n  return {\n    value,\n    finished,\n    target\n  };\n};\n\nconst getCancelledResult = function (target) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : target.get();\n  return {\n    value,\n    cancelled: true,\n    target\n  };\n};\n\nfunction runAsync(to, props, state, target) {\n  const {\n    callId,\n    parentId,\n    onRest\n  } = props;\n  const {\n    asyncTo: prevTo,\n    promise: prevPromise\n  } = state;\n\n  if (!parentId && to === prevTo && !props.reset) {\n    return prevPromise;\n  }\n\n  return state.promise = (async () => {\n    state.asyncId = callId;\n    state.asyncTo = to;\n    const defaultProps = getDefaultProps(props, (value, key) => key === \"onRest\" ? void 0 : value);\n    let preventBail;\n    let bail;\n    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));\n\n    const bailIfEnded = bailSignal => {\n      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);\n\n      if (bailResult) {\n        bailSignal.result = bailResult;\n        bail(bailSignal);\n        throw bailSignal;\n      }\n    };\n\n    const animate = (arg1, arg2) => {\n      const bailSignal = new BailSignal();\n      return (async () => {\n        bailIfEnded(bailSignal);\n        const props2 = is.obj(arg1) ? { ...arg1\n        } : { ...arg2,\n          to: arg1\n        };\n        props2.parentId = callId;\n        eachProp(defaultProps, (value, key) => {\n          if (is.und(props2[key])) {\n            props2[key] = value;\n          }\n        });\n        const result2 = await target.start(props2);\n        bailIfEnded(bailSignal);\n\n        if (state.paused) {\n          await new Promise(resume => {\n            state.resumeQueue.add(resume);\n          });\n        }\n\n        return result2;\n      })();\n    };\n\n    let result;\n\n    try {\n      let animating;\n\n      if (is.arr(to)) {\n        animating = (async queue => {\n          for (const props2 of queue) {\n            await animate(props2);\n          }\n        })(to);\n      } else {\n        animating = Promise.resolve(to(animate, target.stop.bind(target)));\n      }\n\n      await Promise.all([animating.then(preventBail), bailPromise]);\n      result = getFinishedResult(target, true);\n    } catch (err) {\n      if (err instanceof BailSignal) {\n        result = err.result;\n      } else {\n        throw err;\n      }\n    } finally {\n      if (callId == state.asyncId) {\n        state.asyncId = parentId;\n        state.asyncTo = parentId ? prevTo : void 0;\n        state.promise = parentId ? prevPromise : void 0;\n      }\n    }\n\n    if (is.fun(onRest)) {\n      raf.batchedUpdates(() => {\n        onRest(result);\n      });\n    }\n\n    return result;\n  })();\n}\n\nfunction stopAsync(state, cancelId) {\n  flush(state.timeouts, t => t.cancel());\n  state.pauseQueue.clear();\n  state.resumeQueue.clear();\n  state.asyncId = state.asyncTo = state.promise = void 0;\n  if (cancelId) state.cancelId = cancelId;\n}\n\nclass BailSignal extends Error {\n  constructor() {\n    super(\"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\");\n  }\n\n}\n\nconst isFrameValue = value => value instanceof FrameValue;\n\nlet nextId = 1;\n\nclass FrameValue extends FluidValue {\n  constructor() {\n    super(...arguments);\n    this.id = nextId++;\n    this._priority = 0;\n  }\n\n  get priority() {\n    return this._priority;\n  }\n\n  set priority(priority) {\n    if (this._priority != priority) {\n      this._priority = priority;\n\n      this._onPriorityChange(priority);\n    }\n  }\n\n  get() {\n    const node = getAnimated(this);\n    return node && node.getValue();\n  }\n\n  to() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return Globals.to(this, args);\n  }\n\n  interpolate() {\n    deprecateInterpolate();\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return Globals.to(this, args);\n  }\n\n  toJSON() {\n    return this.get();\n  }\n\n  observerAdded(count) {\n    if (count == 1) this._attach();\n  }\n\n  observerRemoved(count) {\n    if (count == 0) this._detach();\n  }\n\n  _attach() {}\n\n  _detach() {}\n\n  _onChange(value) {\n    let idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    callFluidObservers(this, {\n      type: \"change\",\n      parent: this,\n      value,\n      idle\n    });\n  }\n\n  _onPriorityChange(priority) {\n    if (!this.idle) {\n      frameLoop.sort(this);\n    }\n\n    callFluidObservers(this, {\n      type: \"priority\",\n      parent: this,\n      priority\n    });\n  }\n\n}\n\nconst $P = Symbol.for(\"SpringPhase\");\nconst HAS_ANIMATED = 1;\nconst IS_ANIMATING = 2;\nconst IS_PAUSED = 4;\n\nconst hasAnimated = target => (target[$P] & HAS_ANIMATED) > 0;\n\nconst isAnimating = target => (target[$P] & IS_ANIMATING) > 0;\n\nconst isPaused = target => (target[$P] & IS_PAUSED) > 0;\n\nconst setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\n\nconst setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n\nclass SpringValue extends FrameValue {\n  constructor(arg1, arg2) {\n    super();\n    this.animation = new Animation();\n    this.defaultProps = {};\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._pendingCalls = new Set();\n    this._lastCallId = 0;\n    this._lastToId = 0;\n\n    if (!is.und(arg1) || !is.und(arg2)) {\n      const props = is.obj(arg1) ? { ...arg1\n      } : { ...arg2,\n        from: arg1\n      };\n\n      if (is.und(props.default)) {\n        props.default = true;\n      }\n\n      this.start(props);\n    }\n  }\n\n  get idle() {\n    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n  }\n\n  get goal() {\n    return getFluidValue(this.animation.to);\n  }\n\n  get velocity() {\n    const node = getAnimated(this);\n    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map(node2 => node2.lastVelocity || 0);\n  }\n\n  get hasAnimated() {\n    return hasAnimated(this);\n  }\n\n  get isAnimating() {\n    return isAnimating(this);\n  }\n\n  get isPaused() {\n    return isPaused(this);\n  }\n\n  advance(dt) {\n    let idle = true;\n    let changed = false;\n    const anim = this.animation;\n    let {\n      config,\n      toValues\n    } = anim;\n    const payload = getPayload(anim.to);\n\n    if (!payload && hasFluidValue(anim.to)) {\n      toValues = toArray(getFluidValue(anim.to));\n    }\n\n    anim.values.forEach((node2, i) => {\n      if (node2.done) return;\n      const to = node2.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n      let finished = anim.immediate;\n      let position = to;\n\n      if (!finished) {\n        position = node2.lastPosition;\n\n        if (config.tension <= 0) {\n          node2.done = true;\n          return;\n        }\n\n        const elapsed = node2.elapsedTime += dt;\n        const from = anim.fromValues[i];\n        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config.velocity) ? config.velocity[i] : config.velocity;\n        let velocity;\n\n        if (!is.und(config.duration)) {\n          let p = 1;\n\n          if (config.duration > 0) {\n            p = (config.progress || 0) + elapsed / config.duration;\n            p = p > 1 ? 1 : p < 0 ? 0 : p;\n          }\n\n          position = from + config.easing(p) * (to - from);\n          velocity = (position - node2.lastPosition) / dt;\n          finished = p == 1;\n        } else if (config.decay) {\n          const decay = config.decay === true ? 0.998 : config.decay;\n          const e = Math.exp(-(1 - decay) * elapsed);\n          position = from + v0 / (1 - decay) * (1 - e);\n          finished = Math.abs(node2.lastPosition - position) < 0.1;\n          velocity = v0 * e;\n        } else {\n          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;\n          const precision = config.precision || (from == to ? 5e-3 : Math.min(1, Math.abs(to - from) * 1e-3));\n          const restVelocity = config.restVelocity || precision / 10;\n          const bounceFactor = config.clamp ? 0 : config.bounce;\n          const canBounce = !is.und(bounceFactor);\n          const isGrowing = from == to ? node2.v0 > 0 : from < to;\n          let isMoving;\n          let isBouncing = false;\n          const step = 1;\n          const numSteps = Math.ceil(dt / step);\n\n          for (let n = 0; n < numSteps; ++n) {\n            isMoving = Math.abs(velocity) > restVelocity;\n\n            if (!isMoving) {\n              finished = Math.abs(to - position) <= precision;\n\n              if (finished) {\n                break;\n              }\n            }\n\n            if (canBounce) {\n              isBouncing = position == to || position > to == isGrowing;\n\n              if (isBouncing) {\n                velocity = -velocity * bounceFactor;\n                position = to;\n              }\n            }\n\n            const springForce = -config.tension * 1e-6 * (position - to);\n            const dampingForce = -config.friction * 1e-3 * velocity;\n            const acceleration = (springForce + dampingForce) / config.mass;\n            velocity = velocity + acceleration * step;\n            position = position + velocity * step;\n          }\n        }\n\n        node2.lastVelocity = velocity;\n\n        if (Number.isNaN(position)) {\n          console.warn(`Got NaN while animating:`, this);\n          finished = true;\n        }\n      }\n\n      if (payload && !payload[i].done) {\n        finished = false;\n      }\n\n      if (finished) {\n        node2.done = true;\n      } else {\n        idle = false;\n      }\n\n      if (node2.setValue(position, config.round)) {\n        changed = true;\n      }\n    });\n    const node = getAnimated(this);\n\n    if (idle) {\n      const value = getFluidValue(anim.to);\n\n      if (node.setValue(value) || changed) {\n        this._onChange(value);\n      }\n\n      this._stop();\n    } else if (changed) {\n      this._onChange(node.getValue());\n    }\n  }\n\n  set(value) {\n    raf.batchedUpdates(() => {\n      this._stop();\n\n      this._focus(value);\n\n      this._set(value);\n    });\n    return this;\n  }\n\n  pause() {\n    this._update({\n      pause: true\n    });\n  }\n\n  resume() {\n    this._update({\n      pause: false\n    });\n  }\n\n  finish() {\n    if (isAnimating(this)) {\n      const {\n        to,\n        config\n      } = this.animation;\n      raf.batchedUpdates(() => {\n        this._onStart();\n\n        if (!config.decay) {\n          this._set(to, false);\n        }\n\n        this._stop();\n      });\n    }\n\n    return this;\n  }\n\n  update(props) {\n    const queue = this.queue || (this.queue = []);\n    queue.push(props);\n    return this;\n  }\n\n  start(to, arg2) {\n    let queue;\n\n    if (!is.und(to)) {\n      queue = [is.obj(to) ? to : { ...arg2,\n        to\n      }];\n    } else {\n      queue = this.queue || [];\n      this.queue = [];\n    }\n\n    return Promise.all(queue.map(props => this._update(props))).then(results => getCombinedResult(this, results));\n  }\n\n  stop(cancel) {\n    const {\n      to\n    } = this.animation;\n\n    this._focus(this.get());\n\n    stopAsync(this._state, cancel && this._lastCallId);\n    raf.batchedUpdates(() => this._stop(to, cancel));\n    return this;\n  }\n\n  reset() {\n    this._update({\n      reset: true\n    });\n  }\n\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._start();\n    } else if (event.type == \"priority\") {\n      this.priority = event.priority + 1;\n    }\n  }\n\n  _prepareNode(props) {\n    const key = this.key || \"\";\n    let {\n      to,\n      from\n    } = props;\n    to = is.obj(to) ? to[key] : to;\n\n    if (to == null || isAsyncTo(to)) {\n      to = void 0;\n    }\n\n    from = is.obj(from) ? from[key] : from;\n\n    if (from == null) {\n      from = void 0;\n    }\n\n    const range = {\n      to,\n      from\n    };\n\n    if (!hasAnimated(this)) {\n      if (props.reverse) [to, from] = [from, to];\n      from = getFluidValue(from);\n\n      if (!is.und(from)) {\n        this._set(from);\n      } else if (!getAnimated(this)) {\n        this._set(to);\n      }\n    }\n\n    return range;\n  }\n\n  _update(_ref2, isLoop) {\n    let { ...props\n    } = _ref2;\n    const {\n      key,\n      defaultProps\n    } = this;\n    if (props.default) Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));\n    mergeActiveFn(this, props, \"onProps\");\n    sendEvent(this, \"onProps\", props, this);\n\n    const range = this._prepareNode(props);\n\n    if (Object.isFrozen(this)) {\n      throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n    }\n\n    const state = this._state;\n    return scheduleProps(++this._lastCallId, {\n      key,\n      props,\n      defaultProps,\n      state,\n      actions: {\n        pause: () => {\n          if (!isPaused(this)) {\n            setPausedBit(this, true);\n            flushCalls(state.pauseQueue);\n            sendEvent(this, \"onPause\", this);\n          }\n        },\n        resume: () => {\n          if (isPaused(this)) {\n            setPausedBit(this, false);\n\n            if (isAnimating(this)) {\n              this._resume();\n            }\n\n            flushCalls(state.resumeQueue);\n            sendEvent(this, \"onResume\", this);\n          }\n        },\n        start: this._merge.bind(this, range)\n      }\n    }).then(result => {\n      if (props.loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props);\n\n        if (nextProps) {\n          return this._update(nextProps, true);\n        }\n      }\n\n      return result;\n    });\n  }\n\n  _merge(range, props, resolve) {\n    if (props.cancel) {\n      this.stop(true);\n      return resolve(getCancelledResult(this));\n    }\n\n    const hasToProp = !is.und(range.to);\n    const hasFromProp = !is.und(range.from);\n\n    if (hasToProp || hasFromProp) {\n      if (props.callId > this._lastToId) {\n        this._lastToId = props.callId;\n      } else {\n        return resolve(getCancelledResult(this));\n      }\n    }\n\n    const {\n      key,\n      defaultProps,\n      animation: anim\n    } = this;\n    const {\n      to: prevTo,\n      from: prevFrom\n    } = anim;\n    let {\n      to = prevTo,\n      from = prevFrom\n    } = range;\n\n    if (hasFromProp && !hasToProp && (!props.default || is.und(to))) {\n      to = from;\n    }\n\n    if (props.reverse) [to, from] = [from, to];\n    const hasFromChanged = !isEqual(from, prevFrom);\n\n    if (hasFromChanged) {\n      anim.from = from;\n    }\n\n    from = getFluidValue(from);\n    const hasToChanged = !isEqual(to, prevTo);\n\n    if (hasToChanged) {\n      this._focus(to);\n    }\n\n    const hasAsyncTo = isAsyncTo(props.to);\n    const {\n      config\n    } = anim;\n    const {\n      decay,\n      velocity\n    } = config;\n\n    if (hasToProp || hasFromProp) {\n      config.velocity = 0;\n    }\n\n    if (props.config && !hasAsyncTo) {\n      mergeConfig(config, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n    }\n\n    let node = getAnimated(this);\n\n    if (!node || is.und(to)) {\n      return resolve(getFinishedResult(this, true));\n    }\n\n    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);\n    const value = reset ? from : this.get();\n    const goal = computeGoal(to);\n    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);\n    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n\n    if (hasToChanged) {\n      const nodeType = getAnimatedType(to);\n\n      if (nodeType !== node.constructor) {\n        if (immediate) {\n          node = this._set(goal);\n        } else throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the \"to\" prop suggests`);\n      }\n    }\n\n    const goalType = node.constructor;\n    let started = hasFluidValue(to);\n    let finished = false;\n\n    if (!started) {\n      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n\n      if (hasToChanged || hasValueChanged) {\n        finished = isEqual(computeGoal(value), goal);\n        started = !finished;\n      }\n\n      if (!isEqual(config.decay, decay) || !isEqual(config.velocity, velocity)) {\n        started = true;\n      }\n    }\n\n    if (finished && isAnimating(this)) {\n      if (anim.changed && !reset) {\n        started = true;\n      } else if (!started) {\n        this._stop(prevTo);\n      }\n    }\n\n    if (!hasAsyncTo) {\n      if (started || hasFluidValue(prevTo)) {\n        anim.values = node.getPayload();\n        anim.toValues = hasFluidValue(to) ? null : goalType == AnimatedString ? [1] : toArray(goal);\n      }\n\n      if (anim.immediate != immediate) {\n        anim.immediate = immediate;\n\n        if (!immediate && !reset) {\n          this._set(prevTo);\n        }\n      }\n\n      if (started) {\n        const {\n          onRest\n        } = anim;\n        each(ACTIVE_EVENTS, type => mergeActiveFn(this, props, type));\n        const result = getFinishedResult(this, checkFinished(this, prevTo));\n        flushCalls(this._pendingCalls, result);\n\n        this._pendingCalls.add(resolve);\n\n        if (anim.changed) raf.batchedUpdates(() => {\n          var _a;\n\n          anim.changed = !reset;\n          onRest == null ? void 0 : onRest(result);\n\n          if (reset) {\n            callProp(defaultProps.onRest, result);\n          } else {\n            (_a = anim.onStart) == null ? void 0 : _a.call(anim, this);\n          }\n        });\n      }\n    }\n\n    if (reset) {\n      this._set(value);\n    }\n\n    if (hasAsyncTo) {\n      resolve(runAsync(props.to, props, this._state, this));\n    } else if (started) {\n      this._start();\n    } else if (isAnimating(this) && !hasToChanged) {\n      this._pendingCalls.add(resolve);\n    } else {\n      resolve(getNoopResult(this, value));\n    }\n  }\n\n  _focus(value) {\n    const anim = this.animation;\n\n    if (value !== anim.to) {\n      if (getFluidObservers(this)) {\n        this._detach();\n      }\n\n      anim.to = value;\n\n      if (getFluidObservers(this)) {\n        this._attach();\n      }\n    }\n  }\n\n  _attach() {\n    let priority = 0;\n    const {\n      to\n    } = this.animation;\n\n    if (hasFluidValue(to)) {\n      addFluidObserver(to, this);\n\n      if (isFrameValue(to)) {\n        priority = to.priority + 1;\n      }\n    }\n\n    this.priority = priority;\n  }\n\n  _detach() {\n    const {\n      to\n    } = this.animation;\n\n    if (hasFluidValue(to)) {\n      removeFluidObserver(to, this);\n    }\n  }\n\n  _set(arg) {\n    let idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const value = getFluidValue(arg);\n\n    if (!is.und(value)) {\n      const oldNode = getAnimated(this);\n\n      if (!oldNode || !isEqual(value, oldNode.getValue())) {\n        const nodeType = getAnimatedType(value);\n\n        if (!oldNode || oldNode.constructor != nodeType) {\n          setAnimated(this, nodeType.create(value));\n        } else {\n          oldNode.setValue(value);\n        }\n\n        if (oldNode) {\n          raf.batchedUpdates(() => {\n            this._onChange(value, idle);\n          });\n        }\n      }\n    }\n\n    return getAnimated(this);\n  }\n\n  _onStart() {\n    const anim = this.animation;\n\n    if (!anim.changed) {\n      anim.changed = true;\n      sendEvent(this, \"onStart\", this);\n    }\n  }\n\n  _onChange(value, idle) {\n    if (!idle) {\n      this._onStart();\n\n      callProp(this.animation.onChange, value, this);\n    }\n\n    callProp(this.defaultProps.onChange, value, this);\n\n    super._onChange(value, idle);\n  }\n\n  _start() {\n    const anim = this.animation;\n    getAnimated(this).reset(getFluidValue(anim.to));\n\n    if (!anim.immediate) {\n      anim.fromValues = anim.values.map(node => node.lastPosition);\n    }\n\n    if (!isAnimating(this)) {\n      setActiveBit(this, true);\n\n      if (!isPaused(this)) {\n        this._resume();\n      }\n    }\n  }\n\n  _resume() {\n    if (Globals.skipAnimation) {\n      this.finish();\n    } else {\n      frameLoop.start(this);\n    }\n  }\n\n  _stop(goal, cancel) {\n    if (isAnimating(this)) {\n      setActiveBit(this, false);\n      const anim = this.animation;\n      each(anim.values, node => {\n        node.done = true;\n      });\n\n      if (anim.toValues) {\n        anim.onChange = anim.onPause = anim.onResume = void 0;\n      }\n\n      callFluidObservers(this, {\n        type: \"idle\",\n        parent: this\n      });\n      const result = cancel ? getCancelledResult(this) : getFinishedResult(this, checkFinished(this, goal != null ? goal : anim.to));\n      flushCalls(this._pendingCalls, result);\n\n      if (anim.changed) {\n        anim.changed = false;\n        sendEvent(this, \"onRest\", result);\n      }\n    }\n  }\n\n}\n\nfunction checkFinished(target, to) {\n  const goal = computeGoal(to);\n  const value = computeGoal(target.get());\n  return isEqual(value, goal);\n}\n\nfunction createLoopUpdate(props) {\n  let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.loop;\n  let to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : props.to;\n  let loopRet = callProp(loop);\n\n  if (loopRet) {\n    const overrides = loopRet !== true && inferTo(loopRet);\n    const reverse = (overrides || props).reverse;\n    const reset = !overrides || overrides.reset;\n    return createUpdate({ ...props,\n      loop,\n      default: false,\n      pause: void 0,\n      to: !reverse || isAsyncTo(to) ? to : void 0,\n      from: reset ? props.from : void 0,\n      reset,\n      ...overrides\n    });\n  }\n}\n\nfunction createUpdate(props) {\n  const {\n    to,\n    from\n  } = props = inferTo(props);\n  const keys = new Set();\n  if (is.obj(to)) findDefined(to, keys);\n  if (is.obj(from)) findDefined(from, keys);\n  props.keys = keys.size ? Array.from(keys) : null;\n  return props;\n}\n\nfunction declareUpdate(props) {\n  const update = createUpdate(props);\n\n  if (is.und(update.default)) {\n    update.default = getDefaultProps(update);\n  }\n\n  return update;\n}\n\nfunction findDefined(values, keys) {\n  eachProp(values, (value, key) => value != null && keys.add(key));\n}\n\nconst ACTIVE_EVENTS = [\"onStart\", \"onRest\", \"onChange\", \"onPause\", \"onResume\"];\n\nfunction mergeActiveFn(target, props, type) {\n  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;\n}\n\nfunction sendEvent(target, type) {\n  var _a, _b, _c, _d;\n\n  for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n    args[_key4 - 2] = arguments[_key4];\n  }\n\n  (_b = (_a = target.animation)[type]) == null ? void 0 : _b.call(_a, ...args);\n  (_d = (_c = target.defaultProps)[type]) == null ? void 0 : _d.call(_c, ...args);\n}\n\nconst BATCHED_EVENTS = [\"onStart\", \"onChange\", \"onRest\"];\nlet nextId$1 = 1;\n\nclass Controller {\n  constructor(props, flush2) {\n    this.id = nextId$1++;\n    this.springs = {};\n    this.queue = [];\n    this._lastAsyncId = 0;\n    this._active = new Set();\n    this._changed = new Set();\n    this._started = false;\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._events = {\n      onStart: new Set(),\n      onChange: new Set(),\n      onRest: new Map()\n    };\n    this._onFrame = this._onFrame.bind(this);\n\n    if (flush2) {\n      this._flush = flush2;\n    }\n\n    if (props) {\n      this.start({\n        default: true,\n        ...props\n      });\n    }\n  }\n\n  get idle() {\n    return !this._state.asyncTo && Object.values(this.springs).every(spring => spring.idle);\n  }\n\n  get() {\n    const values = {};\n    this.each((spring, key) => values[key] = spring.get());\n    return values;\n  }\n\n  set(values) {\n    for (const key in values) {\n      const value = values[key];\n\n      if (!is.und(value)) {\n        this.springs[key].set(value);\n      }\n    }\n  }\n\n  update(props) {\n    if (props) {\n      this.queue.push(createUpdate(props));\n    }\n\n    return this;\n  }\n\n  start(props) {\n    let {\n      queue\n    } = this;\n\n    if (props) {\n      queue = toArray(props).map(createUpdate);\n    } else {\n      this.queue = [];\n    }\n\n    if (this._flush) {\n      return this._flush(this, queue);\n    }\n\n    prepareKeys(this, queue);\n    return flushUpdateQueue(this, queue);\n  }\n\n  stop(arg, keys) {\n    if (arg !== !!arg) {\n      keys = arg;\n    }\n\n    if (keys) {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].stop(!!arg));\n    } else {\n      stopAsync(this._state, this._lastAsyncId);\n      this.each(spring => spring.stop(!!arg));\n    }\n\n    return this;\n  }\n\n  pause(keys) {\n    if (is.und(keys)) {\n      this.start({\n        pause: true\n      });\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].pause());\n    }\n\n    return this;\n  }\n\n  resume(keys) {\n    if (is.und(keys)) {\n      this.start({\n        pause: false\n      });\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), key => springs[key].resume());\n    }\n\n    return this;\n  }\n\n  each(iterator) {\n    eachProp(this.springs, iterator);\n  }\n\n  _onFrame() {\n    const {\n      onStart,\n      onChange,\n      onRest\n    } = this._events;\n    const active = this._active.size > 0;\n\n    if (active && !this._started) {\n      this._started = true;\n      flushCalls(onStart, this);\n    }\n\n    const idle = !active && this._started;\n    const changed = this._changed.size > 0 && onChange.size;\n    const values = changed || idle && onRest.size ? this.get() : null;\n\n    if (changed) {\n      flushCalls(onChange, values);\n    }\n\n    if (idle) {\n      this._started = false;\n      flush(onRest, _ref3 => {\n        let [onRest2, result] = _ref3;\n        result.value = values;\n        onRest2(result);\n      });\n    }\n  }\n\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._changed.add(event.parent);\n\n      if (!event.idle) {\n        this._active.add(event.parent);\n      }\n    } else if (event.type == \"idle\") {\n      this._active.delete(event.parent);\n    } else return;\n\n    raf.onFrame(this._onFrame);\n  }\n\n}\n\nfunction flushUpdateQueue(ctrl, queue) {\n  return Promise.all(queue.map(props => flushUpdate(ctrl, props))).then(results => getCombinedResult(ctrl, results));\n}\n\nasync function flushUpdate(ctrl, props, isLoop) {\n  const {\n    keys,\n    to,\n    from,\n    loop,\n    onRest,\n    onResolve\n  } = props;\n  const defaults = is.obj(props.default) && props.default;\n\n  if (loop) {\n    props.loop = false;\n  }\n\n  if (to === false) props.to = null;\n  if (from === false) props.from = null;\n  const asyncTo = is.arr(to) || is.fun(to) ? to : void 0;\n\n  if (asyncTo) {\n    props.to = void 0;\n    props.onRest = void 0;\n\n    if (defaults) {\n      defaults.onRest = void 0;\n    }\n  } else {\n    each(BATCHED_EVENTS, key => {\n      const handler = props[key];\n\n      if (is.fun(handler)) {\n        const queue = ctrl[\"_events\"][key];\n\n        if (queue instanceof Set) {\n          props[key] = () => queue.add(handler);\n        } else {\n          props[key] = _ref4 => {\n            let {\n              finished,\n              cancelled\n            } = _ref4;\n            const result2 = queue.get(handler);\n\n            if (result2) {\n              if (!finished) result2.finished = false;\n              if (cancelled) result2.cancelled = true;\n            } else {\n              queue.set(handler, {\n                target: ctrl,\n                value: null,\n                finished,\n                cancelled\n              });\n            }\n          };\n        }\n\n        if (defaults) {\n          defaults[key] = props[key];\n        }\n      }\n    });\n  }\n\n  const state = ctrl[\"_state\"];\n\n  if (props.pause === !state.paused) {\n    state.paused = props.pause;\n    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);\n  } else if (state.paused) {\n    props.pause = true;\n  }\n\n  const promises = (keys || Object.keys(ctrl.springs)).map(key => ctrl.springs[key].start(props));\n  const cancel = props.cancel === true || getDefaultProp(props, \"cancel\") === true;\n\n  if (asyncTo || cancel && state.asyncId) {\n    promises.push(scheduleProps(++ctrl[\"_lastAsyncId\"], {\n      props,\n      state,\n      actions: {\n        pause: noop,\n        resume: noop,\n\n        start(props2, resolve) {\n          if (cancel) {\n            stopAsync(state, ctrl[\"_lastAsyncId\"]);\n            resolve(getCancelledResult(ctrl));\n          } else {\n            props2.onRest = onRest;\n            resolve(runAsync(asyncTo, props2, state, ctrl));\n          }\n        }\n\n      }\n    }));\n  }\n\n  if (state.paused) {\n    await new Promise(resume => {\n      state.resumeQueue.add(resume);\n    });\n  }\n\n  const result = getCombinedResult(ctrl, await Promise.all(promises));\n\n  if (loop && result.finished && !(isLoop && result.noop)) {\n    const nextProps = createLoopUpdate(props, loop, to);\n\n    if (nextProps) {\n      prepareKeys(ctrl, [nextProps]);\n      return flushUpdate(ctrl, nextProps, true);\n    }\n  }\n\n  if (onResolve) {\n    raf.batchedUpdates(() => onResolve(result));\n  }\n\n  return result;\n}\n\nfunction getSprings(ctrl, props) {\n  const springs = { ...ctrl.springs\n  };\n\n  if (props) {\n    each(toArray(props), props2 => {\n      if (is.und(props2.keys)) {\n        props2 = createUpdate(props2);\n      }\n\n      if (!is.obj(props2.to)) {\n        props2 = { ...props2,\n          to: void 0\n        };\n      }\n\n      prepareSprings(springs, props2, key => {\n        return createSpring(key);\n      });\n    });\n  }\n\n  return springs;\n}\n\nfunction setSprings(ctrl, springs) {\n  eachProp(springs, (spring, key) => {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring;\n      addFluidObserver(spring, ctrl);\n    }\n  });\n}\n\nfunction createSpring(key, observer) {\n  const spring = new SpringValue();\n  spring.key = key;\n\n  if (observer) {\n    addFluidObserver(spring, observer);\n  }\n\n  return spring;\n}\n\nfunction prepareSprings(springs, props, create) {\n  if (props.keys) {\n    each(props.keys, key => {\n      const spring = springs[key] || (springs[key] = create(key));\n      spring[\"_prepareNode\"](props);\n    });\n  }\n}\n\nfunction prepareKeys(ctrl, queue) {\n  each(queue, props => {\n    prepareSprings(ctrl.springs, props, key => {\n      return createSpring(key, ctrl);\n    });\n  });\n}\n\nconst SpringContext = _ref5 => {\n  let {\n    children,\n    ...props\n  } = _ref5;\n  const inherited = useContext(ctx);\n  const pause = props.pause || !!inherited.pause,\n        immediate = props.immediate || !!inherited.immediate;\n  props = useMemoOne(() => ({\n    pause,\n    immediate\n  }), [pause, immediate]);\n  const {\n    Provider\n  } = ctx;\n  return /* @__PURE__ */createElement(Provider, {\n    value: props\n  }, children);\n};\n\nconst ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\n\nfunction makeContext(target, init) {\n  Object.assign(target, createContext(init));\n  target.Provider._context = target;\n  target.Consumer._context = target;\n  return target;\n}\n\nclass SpringRef {\n  constructor() {\n    this.current = [];\n  }\n\n  set(values) {\n    each(this.current, ctrl => ctrl.set(values));\n  }\n\n  start(props) {\n    const results = [];\n    each(this.current, (ctrl, i) => {\n      if (is.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        const update = this._getProps(props, ctrl, i);\n\n        if (update) {\n          results.push(ctrl.start(update));\n        }\n      }\n    });\n    return results;\n  }\n\n  update(props) {\n    each(this.current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)));\n    return this;\n  }\n\n  add(ctrl) {\n    if (!this.current.includes(ctrl)) {\n      this.current.push(ctrl);\n    }\n  }\n\n  delete(ctrl) {\n    const i = this.current.indexOf(ctrl);\n    if (~i) this.current.splice(i, 1);\n  }\n\n  _getProps(arg, ctrl, index) {\n    return is.fun(arg) ? arg(index, ctrl) : arg;\n  }\n\n}\n\neach([\"stop\", \"pause\", \"resume\"], key => {\n  SpringRef.prototype[key] = function () {\n    each(this.current, ctrl => ctrl[key](...arguments));\n    return this;\n  };\n});\n\nfunction useSprings(length, props, deps) {\n  const propsFn = is.fun(props) && props;\n  if (propsFn && !deps) deps = [];\n  const ref = useMemo(() => propsFn || arguments.length == 3 ? new SpringRef() : void 0, []);\n  const layoutId = useRef(0);\n  const forceUpdate = useForceUpdate();\n  const state = useMemo(() => ({\n    ctrls: [],\n    queue: [],\n\n    flush(ctrl, updates2) {\n      const springs2 = getSprings(ctrl, updates2);\n      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some(key => !ctrl.springs[key]);\n      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise(resolve => {\n        setSprings(ctrl, springs2);\n        state.queue.push(() => {\n          resolve(flushUpdateQueue(ctrl, updates2));\n        });\n        forceUpdate();\n      });\n    }\n\n  }), []);\n  const ctrls = [...state.ctrls];\n  const updates = [];\n  const prevLength = usePrev(length) || 0;\n  const oldCtrls = ctrls.slice(length, prevLength);\n  useMemo(() => {\n    ctrls.length = length;\n    declareUpdates(prevLength, length);\n  }, [length]);\n  useMemo(() => {\n    declareUpdates(0, Math.min(prevLength, length));\n  }, deps);\n\n  function declareUpdates(startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; i++) {\n      const ctrl = ctrls[i] || (ctrls[i] = new Controller(null, state.flush));\n      const update = propsFn ? propsFn(i, ctrl) : props[i];\n\n      if (update) {\n        updates[i] = declareUpdate(update);\n      }\n    }\n  }\n\n  const springs = ctrls.map((ctrl, i) => getSprings(ctrl, updates[i]));\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    layoutId.current++;\n    state.ctrls = ctrls;\n    const {\n      queue\n    } = state;\n\n    if (queue.length) {\n      state.queue = [];\n      each(queue, cb => cb());\n    }\n\n    each(oldCtrls, ctrl => {\n      detachRefs(ctrl, ref);\n      ctrl.stop(true);\n    });\n    each(ctrls, (ctrl, i) => {\n      const values2 = springs[i];\n      setSprings(ctrl, values2);\n      ref == null ? void 0 : ref.add(ctrl);\n\n      if (hasContext) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      const update = updates[i];\n\n      if (update) {\n        replaceRef(ctrl, update.ref);\n\n        if (ctrl.ref) {\n          ctrl.queue.push(update);\n        } else {\n          ctrl.start(update);\n        }\n      }\n    });\n  });\n  useOnce(() => () => {\n    each(state.ctrls, ctrl => ctrl.stop(true));\n  });\n  const values = springs.map(x => ({ ...x\n  }));\n  return ref ? [values, ref] : values;\n}\n\nfunction useSpring(props, deps) {\n  const isFn = is.fun(props);\n  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);\n  return isFn || arguments.length == 2 ? [values, ref] : values;\n}\n\nconst initSpringRef = () => new SpringRef();\n\nconst useSpringRef = () => useState(initSpringRef)[0];\n\nfunction useTrail(length, propsArg, deps) {\n  const propsFn = is.fun(propsArg) && propsArg;\n  if (propsFn && !deps) deps = [];\n  let reverse = true;\n  const result = useSprings(length, (i, ctrl) => {\n    const props = propsFn ? propsFn(i, ctrl) : propsArg;\n    reverse = reverse && props.reverse;\n    return props;\n  }, deps || [{}]);\n  const ref = result[1];\n  useLayoutEffect(() => {\n    each(ref.current, (ctrl, i) => {\n      const parent = ref.current[i + (reverse ? 1 : -1)];\n      if (parent) ctrl.start({\n        to: parent.springs\n      });\n    });\n  }, deps);\n\n  if (propsFn || arguments.length == 3) {\n    ref[\"_getProps\"] = (propsArg2, ctrl, i) => {\n      const props = is.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;\n\n      if (props) {\n        const parent = ref.current[i + (props.reverse ? 1 : -1)];\n        if (parent) props.to = parent.springs;\n        return props;\n      }\n    };\n\n    return result;\n  }\n\n  return result[0];\n}\n\nconst MOUNT = \"mount\";\nconst ENTER = \"enter\";\nconst UPDATE = \"update\";\nconst LEAVE = \"leave\";\n\nfunction useTransition(data, props, deps) {\n  const {\n    reset,\n    sort,\n    trail = 0,\n    expires = true,\n    onDestroyed\n  } = props;\n  const ref = useMemo(() => arguments.length == 3 ? new SpringRef() : void 0, []);\n  const items = toArray(data);\n  const transitions = [];\n  const usedTransitions = useRef(null);\n  const prevTransitions = reset ? null : usedTransitions.current;\n  useLayoutEffect(() => {\n    usedTransitions.current = transitions;\n  });\n  useOnce(() => () => each(usedTransitions.current, t => {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n    }\n\n    detachRefs(t.ctrl, ref);\n    t.ctrl.stop(true);\n  }));\n  const keys = getKeys(items, props, prevTransitions);\n  const expired = reset && usedTransitions.current || [];\n  useLayoutEffect(() => each(expired, _ref6 => {\n    let {\n      ctrl,\n      item,\n      key\n    } = _ref6;\n    detachRefs(ctrl, ref);\n    callProp(onDestroyed, item, key);\n  }));\n  const reused = [];\n  if (prevTransitions) each(prevTransitions, (t, i) => {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n      expired.push(t);\n    } else {\n      i = reused[i] = keys.indexOf(t.key);\n      if (~i) transitions[i] = t;\n    }\n  });\n  each(items, (item, i) => {\n    transitions[i] || (transitions[i] = {\n      key: keys[i],\n      item,\n      phase: MOUNT,\n      ctrl: new Controller()\n    });\n  });\n\n  if (reused.length) {\n    let i = -1;\n    each(reused, (keyIndex, prevIndex) => {\n      const t = prevTransitions[prevIndex];\n\n      if (~keyIndex) {\n        i = transitions.indexOf(t);\n        transitions[i] = { ...t,\n          item: items[keyIndex]\n        };\n      } else if (props.leave) {\n        transitions.splice(++i, 0, t);\n      }\n    });\n  }\n\n  if (is.fun(sort)) {\n    transitions.sort((a, b) => sort(a.item, b.item));\n  }\n\n  let delay = -trail;\n  const forceUpdate = useForceUpdate();\n  const defaultProps = getDefaultProps(props);\n  const changes = new Map();\n  each(transitions, (t, i) => {\n    const key = t.key;\n    const prevPhase = t.phase;\n    let to;\n    let phase;\n\n    if (prevPhase == MOUNT) {\n      to = props.enter;\n      phase = ENTER;\n    } else {\n      const isLeave = keys.indexOf(key) < 0;\n\n      if (prevPhase != LEAVE) {\n        if (isLeave) {\n          to = props.leave;\n          phase = LEAVE;\n        } else if (to = props.update) {\n          phase = UPDATE;\n        } else return;\n      } else if (!isLeave) {\n        to = props.enter;\n        phase = ENTER;\n      } else return;\n    }\n\n    to = callProp(to, t.item, i);\n    to = is.obj(to) ? inferTo(to) : {\n      to\n    };\n\n    if (!to.config) {\n      const config = props.config || defaultProps.config;\n      to.config = callProp(config, t.item, i);\n    }\n\n    const payload = { ...defaultProps,\n      delay: delay += trail,\n      reset: false,\n      ...to\n    };\n\n    if (phase == ENTER && is.und(payload.from)) {\n      const from = is.und(props.initial) || prevTransitions ? props.from : props.initial;\n      payload.from = callProp(from, t.item, i);\n    }\n\n    const {\n      onResolve\n    } = payload;\n\n    payload.onResolve = result => {\n      callProp(onResolve, result);\n      const transitions2 = usedTransitions.current;\n      const t2 = transitions2.find(t3 => t3.key === key);\n      if (!t2) return;\n\n      if (result.cancelled && t2.phase != UPDATE) {\n        t2.phase = prevPhase;\n        return;\n      }\n\n      if (t2.ctrl.idle) {\n        const idle = transitions2.every(t3 => t3.ctrl.idle);\n\n        if (t2.phase == LEAVE) {\n          const expiry = callProp(expires, t2.item);\n\n          if (expiry !== false) {\n            const expiryMs = expiry === true ? 0 : expiry;\n            t2.expired = true;\n\n            if (!idle && expiryMs > 0) {\n              if (expiryMs <= 2147483647) t2.expirationId = setTimeout(forceUpdate, expiryMs);\n              return;\n            }\n          }\n        }\n\n        if (idle && transitions2.some(t3 => t3.expired)) {\n          forceUpdate();\n        }\n      }\n    };\n\n    const springs = getSprings(t.ctrl, payload);\n    changes.set(t, {\n      phase,\n      springs,\n      payload\n    });\n  });\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    if (hasContext) each(transitions, t => {\n      t.ctrl.start({\n        default: context\n      });\n    });\n  }, [context]);\n  useLayoutEffect(() => {\n    each(changes, (_ref7, t) => {\n      let {\n        phase,\n        springs,\n        payload\n      } = _ref7;\n      const {\n        ctrl\n      } = t;\n      t.phase = phase;\n      ref == null ? void 0 : ref.add(ctrl);\n      replaceRef(ctrl, payload.ref);\n      setSprings(ctrl, springs);\n\n      if (hasContext && phase == ENTER) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      ctrl[ctrl.ref ? \"update\" : \"start\"](payload);\n    });\n  }, reset ? void 0 : deps);\n\n  const renderTransitions = render => /* @__PURE__ */createElement(Fragment, null, transitions.map((t, i) => {\n    const {\n      springs\n    } = changes.get(t) || t.ctrl;\n    const elem = render({ ...springs\n    }, t.item, t, i);\n    return elem && elem.type ? /* @__PURE__ */createElement(elem.type, { ...elem.props,\n      key: is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id,\n      ref: elem.ref\n    }) : elem;\n  }));\n\n  return ref ? [renderTransitions, ref] : renderTransitions;\n}\n\nlet nextKey = 1;\n\nfunction getKeys(items, _ref8, prevTransitions) {\n  let {\n    key,\n    keys = key\n  } = _ref8;\n\n  if (keys === null) {\n    const reused = new Set();\n    return items.map(item => {\n      const t = prevTransitions && prevTransitions.find(t2 => t2.item === item && t2.phase !== LEAVE && !reused.has(t2));\n\n      if (t) {\n        reused.add(t);\n        return t.key;\n      }\n\n      return nextKey++;\n    });\n  }\n\n  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);\n}\n\nfunction Spring(_ref9) {\n  let {\n    children,\n    ...props\n  } = _ref9;\n  return children(useSpring(props));\n}\n\nfunction Trail(_ref10) {\n  let {\n    items,\n    children,\n    ...props\n  } = _ref10;\n  const trails = useTrail(items.length, props);\n  return items.map((item, index) => {\n    const result = children(item, index);\n    return is.fun(result) ? result(trails[index]) : result;\n  });\n}\n\nfunction Transition(_ref11) {\n  let {\n    items,\n    children,\n    ...props\n  } = _ref11;\n  return useTransition(items, props)(children);\n}\n\nclass Interpolation extends FrameValue {\n  constructor(source, args) {\n    super();\n    this.source = source;\n    this.idle = true;\n    this._active = new Set();\n    this.calc = createInterpolator(...args);\n\n    const value = this._get();\n\n    const nodeType = getAnimatedType(value);\n    setAnimated(this, nodeType.create(value));\n  }\n\n  advance(_dt) {\n    const value = this._get();\n\n    const oldValue = this.get();\n\n    if (!isEqual(value, oldValue)) {\n      getAnimated(this).setValue(value);\n\n      this._onChange(value, this.idle);\n    }\n\n    if (!this.idle && checkIdle(this._active)) {\n      becomeIdle(this);\n    }\n  }\n\n  _get() {\n    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));\n    return this.calc(...inputs);\n  }\n\n  _start() {\n    if (this.idle && !checkIdle(this._active)) {\n      this.idle = false;\n      each(getPayload(this), node => {\n        node.done = false;\n      });\n\n      if (Globals.skipAnimation) {\n        raf.batchedUpdates(() => this.advance());\n        becomeIdle(this);\n      } else {\n        frameLoop.start(this);\n      }\n    }\n  }\n\n  _attach() {\n    let priority = 1;\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        addFluidObserver(source, this);\n      }\n\n      if (isFrameValue(source)) {\n        if (!source.idle) {\n          this._active.add(source);\n        }\n\n        priority = Math.max(priority, source.priority + 1);\n      }\n    });\n    this.priority = priority;\n\n    this._start();\n  }\n\n  _detach() {\n    each(toArray(this.source), source => {\n      if (hasFluidValue(source)) {\n        removeFluidObserver(source, this);\n      }\n    });\n\n    this._active.clear();\n\n    becomeIdle(this);\n  }\n\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      if (event.idle) {\n        this.advance();\n      } else {\n        this._active.add(event.parent);\n\n        this._start();\n      }\n    } else if (event.type == \"idle\") {\n      this._active.delete(event.parent);\n    } else if (event.type == \"priority\") {\n      this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);\n    }\n  }\n\n}\n\nfunction isIdle(source) {\n  return source.idle !== false;\n}\n\nfunction checkIdle(active) {\n  return !active.size || Array.from(active).every(isIdle);\n}\n\nfunction becomeIdle(self) {\n  if (!self.idle) {\n    self.idle = true;\n    each(getPayload(self), node => {\n      node.done = true;\n    });\n    callFluidObservers(self, {\n      type: \"idle\",\n      parent: self\n    });\n  }\n}\n\nconst to = function (source) {\n  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n\n  return new Interpolation(source, args);\n};\n\nconst interpolate = function (source) {\n  for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n\n  return deprecateInterpolate(), new Interpolation(source, args);\n};\n\nGlobals.assign({\n  createStringInterpolator,\n  to: (source, args) => new Interpolation(source, args)\n});\nconst update = frameLoop.advance;\nexport { BailSignal, Controller, FrameValue, Interpolation, Spring, SpringContext, SpringRef, SpringValue, Trail, Transition, config, inferTo, interpolate, to, update, useChain, useSpring, useSpringRef, useSprings, useTrail, useTransition };","map":{"version":3,"sources":["src/helpers.ts","src/hooks/useChain.ts","src/constants.ts","src/AnimationConfig.ts","src/Animation.ts","src/scheduleProps.ts","src/AnimationResult.ts","src/runAsync.ts","src/FrameValue.ts","src/SpringPhase.ts","src/SpringValue.ts","src/Controller.ts","src/SpringContext.tsx","src/SpringRef.ts","src/hooks/useSprings.ts","src/hooks/useSpring.ts","src/hooks/useSpringRef.ts","src/hooks/useTrail.ts","src/TransitionPhase.ts","src/hooks/useTransition.tsx","src/components/Spring.tsx","src/components/Trail.tsx","src/components/Transition.tsx","src/Interpolation.ts","src/interpolate.ts","src/globals.ts"],"names":["G","configs","AnimationConfig2","Animation2","scheduleProps2","runAsync2","nextId","SpringValue2","React.createContext","SpringRef2","Controller2","SpringContext2","useSprings2","useSpring2","useTrail2","Interpolation2"],"mappings":"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","sourcesContent":["import { useLayoutEffect } from 'react-layout-effect';\nimport { eachProp, is, toArray, isAnimatedString, Globals, getFluidValue, each, raf, flush, FluidValue, deprecateInterpolate, callFluidObservers, frameLoop, hasFluidValue, flushCalls, isEqual, getFluidObservers, addFluidObserver, removeFluidObserver, noop, useMemoOne, useForceUpdate, usePrev, useOnce, createInterpolator, createStringInterpolator } from '@react-spring/shared';\nexport { Globals, createInterpolator } from '@react-spring/shared';\nimport { useContext, createElement, createContext, useMemo, useRef, useState, Fragment } from 'react';\nimport { getAnimated, AnimatedValue, getPayload, AnimatedString, getAnimatedType, setAnimated } from '@react-spring/animated';\nexport * from '@react-spring/types/animated';\nexport * from '@react-spring/types/interpolation';\n\nfunction callProp(value, ...args) {\n  return is.fun(value) ? value(...args) : value;\n}\nconst matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));\nconst resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;\nconst getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;\nconst noopTransform = (value) => value;\nconst getDefaultProps = (props, transform = noopTransform) => {\n  let keys = DEFAULT_PROPS;\n  if (props.default && props.default !== true) {\n    props = props.default;\n    keys = Object.keys(props);\n  }\n  const defaults = {};\n  for (const key of keys) {\n    const value = transform(props[key], key);\n    if (!is.und(value)) {\n      defaults[key] = value;\n    }\n  }\n  return defaults;\n};\nconst DEFAULT_PROPS = [\n  \"config\",\n  \"onProps\",\n  \"onStart\",\n  \"onChange\",\n  \"onPause\",\n  \"onResume\",\n  \"onRest\"\n];\nconst RESERVED_PROPS = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onPause: 1,\n  onResume: 1,\n  onRest: 1,\n  onResolve: 1,\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  onDestroyed: 1,\n  keys: 1,\n  callId: 1,\n  parentId: 1\n};\nfunction getForwardProps(props) {\n  const forward = {};\n  let count = 0;\n  eachProp(props, (value, prop) => {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value;\n      count++;\n    }\n  });\n  if (count) {\n    return forward;\n  }\n}\nfunction inferTo(props) {\n  const to = getForwardProps(props);\n  if (to) {\n    const out = {to};\n    eachProp(props, (val, key) => key in to || (out[key] = val));\n    return out;\n  }\n  return {...props};\n}\nfunction computeGoal(value) {\n  value = getFluidValue(value);\n  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? Globals.createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\nfunction hasProps(props) {\n  for (const _ in props)\n    return true;\n  return false;\n}\nfunction isAsyncTo(to) {\n  return is.fun(to) || is.arr(to) && is.obj(to[0]);\n}\nfunction detachRefs(ctrl, ref) {\n  var _a;\n  (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);\n  ref == null ? void 0 : ref.delete(ctrl);\n}\nfunction replaceRef(ctrl, ref) {\n  var _a;\n  if (ref && ctrl.ref !== ref) {\n    (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);\n    ref.add(ctrl);\n    ctrl.ref = ref;\n  }\n}\n\nfunction useChain(refs, timeSteps, timeFrame = 1e3) {\n  useLayoutEffect(() => {\n    if (timeSteps) {\n      let prevDelay = 0;\n      each(refs, (ref, i) => {\n        const controllers = ref.current;\n        if (controllers.length) {\n          let delay = timeFrame * timeSteps[i];\n          if (isNaN(delay))\n            delay = prevDelay;\n          else\n            prevDelay = delay;\n          each(controllers, (ctrl) => {\n            each(ctrl.queue, (props) => {\n              props.delay = (key) => delay + callProp(props.delay || 0, key);\n            });\n            ctrl.start();\n          });\n        }\n      });\n    } else {\n      let p = Promise.resolve();\n      each(refs, (ref) => {\n        const controllers = ref.current;\n        if (controllers.length) {\n          const queues = controllers.map((ctrl) => {\n            const q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          });\n          p = p.then(() => {\n            each(controllers, (ctrl, i) => each(queues[i] || [], (update) => ctrl.queue.push(update)));\n            return ref.start();\n          });\n        }\n      });\n    }\n  });\n}\n\nconst config = {\n  default: {tension: 170, friction: 26},\n  gentle: {tension: 120, friction: 14},\n  wobbly: {tension: 180, friction: 12},\n  stiff: {tension: 210, friction: 20},\n  slow: {tension: 280, friction: 60},\n  molasses: {tension: 280, friction: 120}\n};\n\nconst linear = (t) => t;\nconst defaults = {\n  ...config.default,\n  mass: 1,\n  damping: 1,\n  easing: linear,\n  clamp: false\n};\nclass AnimationConfig {\n  constructor() {\n    this.velocity = 0;\n    Object.assign(this, defaults);\n  }\n}\nfunction mergeConfig(config, newConfig, defaultConfig) {\n  if (defaultConfig) {\n    defaultConfig = {...defaultConfig};\n    sanitizeConfig(defaultConfig, newConfig);\n    newConfig = {...defaultConfig, ...newConfig};\n  }\n  sanitizeConfig(config, newConfig);\n  Object.assign(config, newConfig);\n  for (const key in defaults) {\n    if (config[key] == null) {\n      config[key] = defaults[key];\n    }\n  }\n  let {mass, frequency, damping} = config;\n  if (!is.und(frequency)) {\n    if (frequency < 0.01)\n      frequency = 0.01;\n    if (damping < 0)\n      damping = 0;\n    config.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n    config.friction = 4 * Math.PI * damping * mass / frequency;\n  }\n  return config;\n}\nfunction sanitizeConfig(config, props) {\n  if (!is.und(props.decay)) {\n    config.duration = void 0;\n  } else {\n    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);\n    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {\n      config.duration = void 0;\n      config.decay = void 0;\n    }\n    if (isTensionConfig) {\n      config.frequency = void 0;\n    }\n  }\n}\n\nconst emptyArray = [];\nclass Animation {\n  constructor() {\n    this.changed = false;\n    this.values = emptyArray;\n    this.toValues = null;\n    this.fromValues = emptyArray;\n    this.config = new AnimationConfig();\n    this.immediate = false;\n  }\n}\n\nfunction scheduleProps(callId, {key, props, defaultProps, state, actions}) {\n  return new Promise((resolve, reject) => {\n    var _a;\n    let delay;\n    let timeout;\n    let cancel = matchProp((_a = props.cancel) != null ? _a : defaultProps == null ? void 0 : defaultProps.cancel, key);\n    if (cancel) {\n      onStart();\n    } else {\n      if (!is.und(props.pause)) {\n        state.paused = matchProp(props.pause, key);\n      }\n      let pause = defaultProps == null ? void 0 : defaultProps.pause;\n      if (pause !== true) {\n        pause = state.paused || matchProp(pause, key);\n      }\n      delay = callProp(props.delay || 0, key);\n      if (pause) {\n        state.resumeQueue.add(onResume);\n        actions.pause();\n      } else {\n        actions.resume();\n        onResume();\n      }\n    }\n    function onPause() {\n      state.resumeQueue.add(onResume);\n      state.timeouts.delete(timeout);\n      timeout.cancel();\n      delay = timeout.time - raf.now();\n    }\n    function onResume() {\n      if (delay > 0) {\n        timeout = raf.setTimeout(onStart, delay);\n        state.pauseQueue.add(onPause);\n        state.timeouts.add(timeout);\n      } else {\n        onStart();\n      }\n    }\n    function onStart() {\n      state.pauseQueue.delete(onPause);\n      state.timeouts.delete(timeout);\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true;\n      }\n      try {\n        actions.start({...props, callId, cancel}, resolve);\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n}\n\nconst getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target) : results.every((result) => result.noop) ? getNoopResult(target) : getFinishedResult(target, results.every((result) => result.finished));\nconst getNoopResult = (target, value = target.get()) => ({\n  value,\n  noop: true,\n  finished: true,\n  target\n});\nconst getFinishedResult = (target, finished, value = target.get()) => ({\n  value,\n  finished,\n  target\n});\nconst getCancelledResult = (target, value = target.get()) => ({\n  value,\n  cancelled: true,\n  target\n});\n\nfunction runAsync(to, props, state, target) {\n  const {callId, parentId, onRest} = props;\n  const {asyncTo: prevTo, promise: prevPromise} = state;\n  if (!parentId && to === prevTo && !props.reset) {\n    return prevPromise;\n  }\n  return state.promise = (async () => {\n    state.asyncId = callId;\n    state.asyncTo = to;\n    const defaultProps = getDefaultProps(props, (value, key) => key === \"onRest\" ? void 0 : value);\n    let preventBail;\n    let bail;\n    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));\n    const bailIfEnded = (bailSignal) => {\n      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);\n      if (bailResult) {\n        bailSignal.result = bailResult;\n        bail(bailSignal);\n        throw bailSignal;\n      }\n    };\n    const animate = (arg1, arg2) => {\n      const bailSignal = new BailSignal();\n      return (async () => {\n        bailIfEnded(bailSignal);\n        const props2 = is.obj(arg1) ? {...arg1} : {...arg2, to: arg1};\n        props2.parentId = callId;\n        eachProp(defaultProps, (value, key) => {\n          if (is.und(props2[key])) {\n            props2[key] = value;\n          }\n        });\n        const result2 = await target.start(props2);\n        bailIfEnded(bailSignal);\n        if (state.paused) {\n          await new Promise((resume) => {\n            state.resumeQueue.add(resume);\n          });\n        }\n        return result2;\n      })();\n    };\n    let result;\n    try {\n      let animating;\n      if (is.arr(to)) {\n        animating = (async (queue) => {\n          for (const props2 of queue) {\n            await animate(props2);\n          }\n        })(to);\n      } else {\n        animating = Promise.resolve(to(animate, target.stop.bind(target)));\n      }\n      await Promise.all([animating.then(preventBail), bailPromise]);\n      result = getFinishedResult(target, true);\n    } catch (err) {\n      if (err instanceof BailSignal) {\n        result = err.result;\n      } else {\n        throw err;\n      }\n    } finally {\n      if (callId == state.asyncId) {\n        state.asyncId = parentId;\n        state.asyncTo = parentId ? prevTo : void 0;\n        state.promise = parentId ? prevPromise : void 0;\n      }\n    }\n    if (is.fun(onRest)) {\n      raf.batchedUpdates(() => {\n        onRest(result);\n      });\n    }\n    return result;\n  })();\n}\nfunction stopAsync(state, cancelId) {\n  flush(state.timeouts, (t) => t.cancel());\n  state.pauseQueue.clear();\n  state.resumeQueue.clear();\n  state.asyncId = state.asyncTo = state.promise = void 0;\n  if (cancelId)\n    state.cancelId = cancelId;\n}\nclass BailSignal extends Error {\n  constructor() {\n    super(\"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\");\n  }\n}\n\nconst isFrameValue = (value) => value instanceof FrameValue;\nlet nextId = 1;\nclass FrameValue extends FluidValue {\n  constructor() {\n    super(...arguments);\n    this.id = nextId++;\n    this._priority = 0;\n  }\n  get priority() {\n    return this._priority;\n  }\n  set priority(priority) {\n    if (this._priority != priority) {\n      this._priority = priority;\n      this._onPriorityChange(priority);\n    }\n  }\n  get() {\n    const node = getAnimated(this);\n    return node && node.getValue();\n  }\n  to(...args) {\n    return Globals.to(this, args);\n  }\n  interpolate(...args) {\n    deprecateInterpolate();\n    return Globals.to(this, args);\n  }\n  toJSON() {\n    return this.get();\n  }\n  observerAdded(count) {\n    if (count == 1)\n      this._attach();\n  }\n  observerRemoved(count) {\n    if (count == 0)\n      this._detach();\n  }\n  _attach() {\n  }\n  _detach() {\n  }\n  _onChange(value, idle = false) {\n    callFluidObservers(this, {\n      type: \"change\",\n      parent: this,\n      value,\n      idle\n    });\n  }\n  _onPriorityChange(priority) {\n    if (!this.idle) {\n      frameLoop.sort(this);\n    }\n    callFluidObservers(this, {\n      type: \"priority\",\n      parent: this,\n      priority\n    });\n  }\n}\n\nconst $P = Symbol.for(\"SpringPhase\");\nconst HAS_ANIMATED = 1;\nconst IS_ANIMATING = 2;\nconst IS_PAUSED = 4;\nconst hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;\nconst isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;\nconst isPaused = (target) => (target[$P] & IS_PAUSED) > 0;\nconst setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\nconst setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n\nclass SpringValue extends FrameValue {\n  constructor(arg1, arg2) {\n    super();\n    this.animation = new Animation();\n    this.defaultProps = {};\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._pendingCalls = new Set();\n    this._lastCallId = 0;\n    this._lastToId = 0;\n    if (!is.und(arg1) || !is.und(arg2)) {\n      const props = is.obj(arg1) ? {...arg1} : {...arg2, from: arg1};\n      if (is.und(props.default)) {\n        props.default = true;\n      }\n      this.start(props);\n    }\n  }\n  get idle() {\n    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n  }\n  get goal() {\n    return getFluidValue(this.animation.to);\n  }\n  get velocity() {\n    const node = getAnimated(this);\n    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);\n  }\n  get hasAnimated() {\n    return hasAnimated(this);\n  }\n  get isAnimating() {\n    return isAnimating(this);\n  }\n  get isPaused() {\n    return isPaused(this);\n  }\n  advance(dt) {\n    let idle = true;\n    let changed = false;\n    const anim = this.animation;\n    let {config, toValues} = anim;\n    const payload = getPayload(anim.to);\n    if (!payload && hasFluidValue(anim.to)) {\n      toValues = toArray(getFluidValue(anim.to));\n    }\n    anim.values.forEach((node2, i) => {\n      if (node2.done)\n        return;\n      const to = node2.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n      let finished = anim.immediate;\n      let position = to;\n      if (!finished) {\n        position = node2.lastPosition;\n        if (config.tension <= 0) {\n          node2.done = true;\n          return;\n        }\n        const elapsed = node2.elapsedTime += dt;\n        const from = anim.fromValues[i];\n        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config.velocity) ? config.velocity[i] : config.velocity;\n        let velocity;\n        if (!is.und(config.duration)) {\n          let p = 1;\n          if (config.duration > 0) {\n            p = (config.progress || 0) + elapsed / config.duration;\n            p = p > 1 ? 1 : p < 0 ? 0 : p;\n          }\n          position = from + config.easing(p) * (to - from);\n          velocity = (position - node2.lastPosition) / dt;\n          finished = p == 1;\n        } else if (config.decay) {\n          const decay = config.decay === true ? 0.998 : config.decay;\n          const e = Math.exp(-(1 - decay) * elapsed);\n          position = from + v0 / (1 - decay) * (1 - e);\n          finished = Math.abs(node2.lastPosition - position) < 0.1;\n          velocity = v0 * e;\n        } else {\n          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;\n          const precision = config.precision || (from == to ? 5e-3 : Math.min(1, Math.abs(to - from) * 1e-3));\n          const restVelocity = config.restVelocity || precision / 10;\n          const bounceFactor = config.clamp ? 0 : config.bounce;\n          const canBounce = !is.und(bounceFactor);\n          const isGrowing = from == to ? node2.v0 > 0 : from < to;\n          let isMoving;\n          let isBouncing = false;\n          const step = 1;\n          const numSteps = Math.ceil(dt / step);\n          for (let n = 0; n < numSteps; ++n) {\n            isMoving = Math.abs(velocity) > restVelocity;\n            if (!isMoving) {\n              finished = Math.abs(to - position) <= precision;\n              if (finished) {\n                break;\n              }\n            }\n            if (canBounce) {\n              isBouncing = position == to || position > to == isGrowing;\n              if (isBouncing) {\n                velocity = -velocity * bounceFactor;\n                position = to;\n              }\n            }\n            const springForce = -config.tension * 1e-6 * (position - to);\n            const dampingForce = -config.friction * 1e-3 * velocity;\n            const acceleration = (springForce + dampingForce) / config.mass;\n            velocity = velocity + acceleration * step;\n            position = position + velocity * step;\n          }\n        }\n        node2.lastVelocity = velocity;\n        if (Number.isNaN(position)) {\n          console.warn(`Got NaN while animating:`, this);\n          finished = true;\n        }\n      }\n      if (payload && !payload[i].done) {\n        finished = false;\n      }\n      if (finished) {\n        node2.done = true;\n      } else {\n        idle = false;\n      }\n      if (node2.setValue(position, config.round)) {\n        changed = true;\n      }\n    });\n    const node = getAnimated(this);\n    if (idle) {\n      const value = getFluidValue(anim.to);\n      if (node.setValue(value) || changed) {\n        this._onChange(value);\n      }\n      this._stop();\n    } else if (changed) {\n      this._onChange(node.getValue());\n    }\n  }\n  set(value) {\n    raf.batchedUpdates(() => {\n      this._stop();\n      this._focus(value);\n      this._set(value);\n    });\n    return this;\n  }\n  pause() {\n    this._update({pause: true});\n  }\n  resume() {\n    this._update({pause: false});\n  }\n  finish() {\n    if (isAnimating(this)) {\n      const {to, config} = this.animation;\n      raf.batchedUpdates(() => {\n        this._onStart();\n        if (!config.decay) {\n          this._set(to, false);\n        }\n        this._stop();\n      });\n    }\n    return this;\n  }\n  update(props) {\n    const queue = this.queue || (this.queue = []);\n    queue.push(props);\n    return this;\n  }\n  start(to, arg2) {\n    let queue;\n    if (!is.und(to)) {\n      queue = [is.obj(to) ? to : {...arg2, to}];\n    } else {\n      queue = this.queue || [];\n      this.queue = [];\n    }\n    return Promise.all(queue.map((props) => this._update(props))).then((results) => getCombinedResult(this, results));\n  }\n  stop(cancel) {\n    const {to} = this.animation;\n    this._focus(this.get());\n    stopAsync(this._state, cancel && this._lastCallId);\n    raf.batchedUpdates(() => this._stop(to, cancel));\n    return this;\n  }\n  reset() {\n    this._update({reset: true});\n  }\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._start();\n    } else if (event.type == \"priority\") {\n      this.priority = event.priority + 1;\n    }\n  }\n  _prepareNode(props) {\n    const key = this.key || \"\";\n    let {to, from} = props;\n    to = is.obj(to) ? to[key] : to;\n    if (to == null || isAsyncTo(to)) {\n      to = void 0;\n    }\n    from = is.obj(from) ? from[key] : from;\n    if (from == null) {\n      from = void 0;\n    }\n    const range = {to, from};\n    if (!hasAnimated(this)) {\n      if (props.reverse)\n        [to, from] = [from, to];\n      from = getFluidValue(from);\n      if (!is.und(from)) {\n        this._set(from);\n      } else if (!getAnimated(this)) {\n        this._set(to);\n      }\n    }\n    return range;\n  }\n  _update({...props}, isLoop) {\n    const {key, defaultProps} = this;\n    if (props.default)\n      Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));\n    mergeActiveFn(this, props, \"onProps\");\n    sendEvent(this, \"onProps\", props, this);\n    const range = this._prepareNode(props);\n    if (Object.isFrozen(this)) {\n      throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n    }\n    const state = this._state;\n    return scheduleProps(++this._lastCallId, {\n      key,\n      props,\n      defaultProps,\n      state,\n      actions: {\n        pause: () => {\n          if (!isPaused(this)) {\n            setPausedBit(this, true);\n            flushCalls(state.pauseQueue);\n            sendEvent(this, \"onPause\", this);\n          }\n        },\n        resume: () => {\n          if (isPaused(this)) {\n            setPausedBit(this, false);\n            if (isAnimating(this)) {\n              this._resume();\n            }\n            flushCalls(state.resumeQueue);\n            sendEvent(this, \"onResume\", this);\n          }\n        },\n        start: this._merge.bind(this, range)\n      }\n    }).then((result) => {\n      if (props.loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props);\n        if (nextProps) {\n          return this._update(nextProps, true);\n        }\n      }\n      return result;\n    });\n  }\n  _merge(range, props, resolve) {\n    if (props.cancel) {\n      this.stop(true);\n      return resolve(getCancelledResult(this));\n    }\n    const hasToProp = !is.und(range.to);\n    const hasFromProp = !is.und(range.from);\n    if (hasToProp || hasFromProp) {\n      if (props.callId > this._lastToId) {\n        this._lastToId = props.callId;\n      } else {\n        return resolve(getCancelledResult(this));\n      }\n    }\n    const {key, defaultProps, animation: anim} = this;\n    const {to: prevTo, from: prevFrom} = anim;\n    let {to = prevTo, from = prevFrom} = range;\n    if (hasFromProp && !hasToProp && (!props.default || is.und(to))) {\n      to = from;\n    }\n    if (props.reverse)\n      [to, from] = [from, to];\n    const hasFromChanged = !isEqual(from, prevFrom);\n    if (hasFromChanged) {\n      anim.from = from;\n    }\n    from = getFluidValue(from);\n    const hasToChanged = !isEqual(to, prevTo);\n    if (hasToChanged) {\n      this._focus(to);\n    }\n    const hasAsyncTo = isAsyncTo(props.to);\n    const {config} = anim;\n    const {decay, velocity} = config;\n    if (hasToProp || hasFromProp) {\n      config.velocity = 0;\n    }\n    if (props.config && !hasAsyncTo) {\n      mergeConfig(config, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n    }\n    let node = getAnimated(this);\n    if (!node || is.und(to)) {\n      return resolve(getFinishedResult(this, true));\n    }\n    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);\n    const value = reset ? from : this.get();\n    const goal = computeGoal(to);\n    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);\n    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n    if (hasToChanged) {\n      const nodeType = getAnimatedType(to);\n      if (nodeType !== node.constructor) {\n        if (immediate) {\n          node = this._set(goal);\n        } else\n          throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the \"to\" prop suggests`);\n      }\n    }\n    const goalType = node.constructor;\n    let started = hasFluidValue(to);\n    let finished = false;\n    if (!started) {\n      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n      if (hasToChanged || hasValueChanged) {\n        finished = isEqual(computeGoal(value), goal);\n        started = !finished;\n      }\n      if (!isEqual(config.decay, decay) || !isEqual(config.velocity, velocity)) {\n        started = true;\n      }\n    }\n    if (finished && isAnimating(this)) {\n      if (anim.changed && !reset) {\n        started = true;\n      } else if (!started) {\n        this._stop(prevTo);\n      }\n    }\n    if (!hasAsyncTo) {\n      if (started || hasFluidValue(prevTo)) {\n        anim.values = node.getPayload();\n        anim.toValues = hasFluidValue(to) ? null : goalType == AnimatedString ? [1] : toArray(goal);\n      }\n      if (anim.immediate != immediate) {\n        anim.immediate = immediate;\n        if (!immediate && !reset) {\n          this._set(prevTo);\n        }\n      }\n      if (started) {\n        const {onRest} = anim;\n        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));\n        const result = getFinishedResult(this, checkFinished(this, prevTo));\n        flushCalls(this._pendingCalls, result);\n        this._pendingCalls.add(resolve);\n        if (anim.changed)\n          raf.batchedUpdates(() => {\n            var _a;\n            anim.changed = !reset;\n            onRest == null ? void 0 : onRest(result);\n            if (reset) {\n              callProp(defaultProps.onRest, result);\n            } else {\n              (_a = anim.onStart) == null ? void 0 : _a.call(anim, this);\n            }\n          });\n      }\n    }\n    if (reset) {\n      this._set(value);\n    }\n    if (hasAsyncTo) {\n      resolve(runAsync(props.to, props, this._state, this));\n    } else if (started) {\n      this._start();\n    } else if (isAnimating(this) && !hasToChanged) {\n      this._pendingCalls.add(resolve);\n    } else {\n      resolve(getNoopResult(this, value));\n    }\n  }\n  _focus(value) {\n    const anim = this.animation;\n    if (value !== anim.to) {\n      if (getFluidObservers(this)) {\n        this._detach();\n      }\n      anim.to = value;\n      if (getFluidObservers(this)) {\n        this._attach();\n      }\n    }\n  }\n  _attach() {\n    let priority = 0;\n    const {to} = this.animation;\n    if (hasFluidValue(to)) {\n      addFluidObserver(to, this);\n      if (isFrameValue(to)) {\n        priority = to.priority + 1;\n      }\n    }\n    this.priority = priority;\n  }\n  _detach() {\n    const {to} = this.animation;\n    if (hasFluidValue(to)) {\n      removeFluidObserver(to, this);\n    }\n  }\n  _set(arg, idle = true) {\n    const value = getFluidValue(arg);\n    if (!is.und(value)) {\n      const oldNode = getAnimated(this);\n      if (!oldNode || !isEqual(value, oldNode.getValue())) {\n        const nodeType = getAnimatedType(value);\n        if (!oldNode || oldNode.constructor != nodeType) {\n          setAnimated(this, nodeType.create(value));\n        } else {\n          oldNode.setValue(value);\n        }\n        if (oldNode) {\n          raf.batchedUpdates(() => {\n            this._onChange(value, idle);\n          });\n        }\n      }\n    }\n    return getAnimated(this);\n  }\n  _onStart() {\n    const anim = this.animation;\n    if (!anim.changed) {\n      anim.changed = true;\n      sendEvent(this, \"onStart\", this);\n    }\n  }\n  _onChange(value, idle) {\n    if (!idle) {\n      this._onStart();\n      callProp(this.animation.onChange, value, this);\n    }\n    callProp(this.defaultProps.onChange, value, this);\n    super._onChange(value, idle);\n  }\n  _start() {\n    const anim = this.animation;\n    getAnimated(this).reset(getFluidValue(anim.to));\n    if (!anim.immediate) {\n      anim.fromValues = anim.values.map((node) => node.lastPosition);\n    }\n    if (!isAnimating(this)) {\n      setActiveBit(this, true);\n      if (!isPaused(this)) {\n        this._resume();\n      }\n    }\n  }\n  _resume() {\n    if (Globals.skipAnimation) {\n      this.finish();\n    } else {\n      frameLoop.start(this);\n    }\n  }\n  _stop(goal, cancel) {\n    if (isAnimating(this)) {\n      setActiveBit(this, false);\n      const anim = this.animation;\n      each(anim.values, (node) => {\n        node.done = true;\n      });\n      if (anim.toValues) {\n        anim.onChange = anim.onPause = anim.onResume = void 0;\n      }\n      callFluidObservers(this, {\n        type: \"idle\",\n        parent: this\n      });\n      const result = cancel ? getCancelledResult(this) : getFinishedResult(this, checkFinished(this, goal != null ? goal : anim.to));\n      flushCalls(this._pendingCalls, result);\n      if (anim.changed) {\n        anim.changed = false;\n        sendEvent(this, \"onRest\", result);\n      }\n    }\n  }\n}\nfunction checkFinished(target, to) {\n  const goal = computeGoal(to);\n  const value = computeGoal(target.get());\n  return isEqual(value, goal);\n}\nfunction createLoopUpdate(props, loop = props.loop, to = props.to) {\n  let loopRet = callProp(loop);\n  if (loopRet) {\n    const overrides = loopRet !== true && inferTo(loopRet);\n    const reverse = (overrides || props).reverse;\n    const reset = !overrides || overrides.reset;\n    return createUpdate({\n      ...props,\n      loop,\n      default: false,\n      pause: void 0,\n      to: !reverse || isAsyncTo(to) ? to : void 0,\n      from: reset ? props.from : void 0,\n      reset,\n      ...overrides\n    });\n  }\n}\nfunction createUpdate(props) {\n  const {to, from} = props = inferTo(props);\n  const keys = new Set();\n  if (is.obj(to))\n    findDefined(to, keys);\n  if (is.obj(from))\n    findDefined(from, keys);\n  props.keys = keys.size ? Array.from(keys) : null;\n  return props;\n}\nfunction declareUpdate(props) {\n  const update = createUpdate(props);\n  if (is.und(update.default)) {\n    update.default = getDefaultProps(update);\n  }\n  return update;\n}\nfunction findDefined(values, keys) {\n  eachProp(values, (value, key) => value != null && keys.add(key));\n}\nconst ACTIVE_EVENTS = [\n  \"onStart\",\n  \"onRest\",\n  \"onChange\",\n  \"onPause\",\n  \"onResume\"\n];\nfunction mergeActiveFn(target, props, type) {\n  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;\n}\nfunction sendEvent(target, type, ...args) {\n  var _a, _b, _c, _d;\n  (_b = (_a = target.animation)[type]) == null ? void 0 : _b.call(_a, ...args);\n  (_d = (_c = target.defaultProps)[type]) == null ? void 0 : _d.call(_c, ...args);\n}\n\nconst BATCHED_EVENTS = [\"onStart\", \"onChange\", \"onRest\"];\nlet nextId$1 = 1;\nclass Controller {\n  constructor(props, flush2) {\n    this.id = nextId$1++;\n    this.springs = {};\n    this.queue = [];\n    this._lastAsyncId = 0;\n    this._active = new Set();\n    this._changed = new Set();\n    this._started = false;\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._events = {\n      onStart: new Set(),\n      onChange: new Set(),\n      onRest: new Map()\n    };\n    this._onFrame = this._onFrame.bind(this);\n    if (flush2) {\n      this._flush = flush2;\n    }\n    if (props) {\n      this.start({default: true, ...props});\n    }\n  }\n  get idle() {\n    return !this._state.asyncTo && Object.values(this.springs).every((spring) => spring.idle);\n  }\n  get() {\n    const values = {};\n    this.each((spring, key) => values[key] = spring.get());\n    return values;\n  }\n  set(values) {\n    for (const key in values) {\n      const value = values[key];\n      if (!is.und(value)) {\n        this.springs[key].set(value);\n      }\n    }\n  }\n  update(props) {\n    if (props) {\n      this.queue.push(createUpdate(props));\n    }\n    return this;\n  }\n  start(props) {\n    let {queue} = this;\n    if (props) {\n      queue = toArray(props).map(createUpdate);\n    } else {\n      this.queue = [];\n    }\n    if (this._flush) {\n      return this._flush(this, queue);\n    }\n    prepareKeys(this, queue);\n    return flushUpdateQueue(this, queue);\n  }\n  stop(arg, keys) {\n    if (arg !== !!arg) {\n      keys = arg;\n    }\n    if (keys) {\n      const springs = this.springs;\n      each(toArray(keys), (key) => springs[key].stop(!!arg));\n    } else {\n      stopAsync(this._state, this._lastAsyncId);\n      this.each((spring) => spring.stop(!!arg));\n    }\n    return this;\n  }\n  pause(keys) {\n    if (is.und(keys)) {\n      this.start({pause: true});\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), (key) => springs[key].pause());\n    }\n    return this;\n  }\n  resume(keys) {\n    if (is.und(keys)) {\n      this.start({pause: false});\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), (key) => springs[key].resume());\n    }\n    return this;\n  }\n  each(iterator) {\n    eachProp(this.springs, iterator);\n  }\n  _onFrame() {\n    const {onStart, onChange, onRest} = this._events;\n    const active = this._active.size > 0;\n    if (active && !this._started) {\n      this._started = true;\n      flushCalls(onStart, this);\n    }\n    const idle = !active && this._started;\n    const changed = this._changed.size > 0 && onChange.size;\n    const values = changed || idle && onRest.size ? this.get() : null;\n    if (changed) {\n      flushCalls(onChange, values);\n    }\n    if (idle) {\n      this._started = false;\n      flush(onRest, ([onRest2, result]) => {\n        result.value = values;\n        onRest2(result);\n      });\n    }\n  }\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._changed.add(event.parent);\n      if (!event.idle) {\n        this._active.add(event.parent);\n      }\n    } else if (event.type == \"idle\") {\n      this._active.delete(event.parent);\n    } else\n      return;\n    raf.onFrame(this._onFrame);\n  }\n}\nfunction flushUpdateQueue(ctrl, queue) {\n  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then((results) => getCombinedResult(ctrl, results));\n}\nasync function flushUpdate(ctrl, props, isLoop) {\n  const {keys, to, from, loop, onRest, onResolve} = props;\n  const defaults = is.obj(props.default) && props.default;\n  if (loop) {\n    props.loop = false;\n  }\n  if (to === false)\n    props.to = null;\n  if (from === false)\n    props.from = null;\n  const asyncTo = is.arr(to) || is.fun(to) ? to : void 0;\n  if (asyncTo) {\n    props.to = void 0;\n    props.onRest = void 0;\n    if (defaults) {\n      defaults.onRest = void 0;\n    }\n  } else {\n    each(BATCHED_EVENTS, (key) => {\n      const handler = props[key];\n      if (is.fun(handler)) {\n        const queue = ctrl[\"_events\"][key];\n        if (queue instanceof Set) {\n          props[key] = () => queue.add(handler);\n        } else {\n          props[key] = ({finished, cancelled}) => {\n            const result2 = queue.get(handler);\n            if (result2) {\n              if (!finished)\n                result2.finished = false;\n              if (cancelled)\n                result2.cancelled = true;\n            } else {\n              queue.set(handler, {\n                target: ctrl,\n                value: null,\n                finished,\n                cancelled\n              });\n            }\n          };\n        }\n        if (defaults) {\n          defaults[key] = props[key];\n        }\n      }\n    });\n  }\n  const state = ctrl[\"_state\"];\n  if (props.pause === !state.paused) {\n    state.paused = props.pause;\n    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);\n  } else if (state.paused) {\n    props.pause = true;\n  }\n  const promises = (keys || Object.keys(ctrl.springs)).map((key) => ctrl.springs[key].start(props));\n  const cancel = props.cancel === true || getDefaultProp(props, \"cancel\") === true;\n  if (asyncTo || cancel && state.asyncId) {\n    promises.push(scheduleProps(++ctrl[\"_lastAsyncId\"], {\n      props,\n      state,\n      actions: {\n        pause: noop,\n        resume: noop,\n        start(props2, resolve) {\n          if (cancel) {\n            stopAsync(state, ctrl[\"_lastAsyncId\"]);\n            resolve(getCancelledResult(ctrl));\n          } else {\n            props2.onRest = onRest;\n            resolve(runAsync(asyncTo, props2, state, ctrl));\n          }\n        }\n      }\n    }));\n  }\n  if (state.paused) {\n    await new Promise((resume) => {\n      state.resumeQueue.add(resume);\n    });\n  }\n  const result = getCombinedResult(ctrl, await Promise.all(promises));\n  if (loop && result.finished && !(isLoop && result.noop)) {\n    const nextProps = createLoopUpdate(props, loop, to);\n    if (nextProps) {\n      prepareKeys(ctrl, [nextProps]);\n      return flushUpdate(ctrl, nextProps, true);\n    }\n  }\n  if (onResolve) {\n    raf.batchedUpdates(() => onResolve(result));\n  }\n  return result;\n}\nfunction getSprings(ctrl, props) {\n  const springs = {...ctrl.springs};\n  if (props) {\n    each(toArray(props), (props2) => {\n      if (is.und(props2.keys)) {\n        props2 = createUpdate(props2);\n      }\n      if (!is.obj(props2.to)) {\n        props2 = {...props2, to: void 0};\n      }\n      prepareSprings(springs, props2, (key) => {\n        return createSpring(key);\n      });\n    });\n  }\n  return springs;\n}\nfunction setSprings(ctrl, springs) {\n  eachProp(springs, (spring, key) => {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring;\n      addFluidObserver(spring, ctrl);\n    }\n  });\n}\nfunction createSpring(key, observer) {\n  const spring = new SpringValue();\n  spring.key = key;\n  if (observer) {\n    addFluidObserver(spring, observer);\n  }\n  return spring;\n}\nfunction prepareSprings(springs, props, create) {\n  if (props.keys) {\n    each(props.keys, (key) => {\n      const spring = springs[key] || (springs[key] = create(key));\n      spring[\"_prepareNode\"](props);\n    });\n  }\n}\nfunction prepareKeys(ctrl, queue) {\n  each(queue, (props) => {\n    prepareSprings(ctrl.springs, props, (key) => {\n      return createSpring(key, ctrl);\n    });\n  });\n}\n\nconst SpringContext = ({\n  children,\n  ...props\n}) => {\n  const inherited = useContext(ctx);\n  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;\n  props = useMemoOne(() => ({pause, immediate}), [pause, immediate]);\n  const {Provider} = ctx;\n  return /* @__PURE__ */ createElement(Provider, {\n    value: props\n  }, children);\n};\nconst ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\nfunction makeContext(target, init) {\n  Object.assign(target, createContext(init));\n  target.Provider._context = target;\n  target.Consumer._context = target;\n  return target;\n}\n\nclass SpringRef {\n  constructor() {\n    this.current = [];\n  }\n  set(values) {\n    each(this.current, (ctrl) => ctrl.set(values));\n  }\n  start(props) {\n    const results = [];\n    each(this.current, (ctrl, i) => {\n      if (is.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        const update = this._getProps(props, ctrl, i);\n        if (update) {\n          results.push(ctrl.start(update));\n        }\n      }\n    });\n    return results;\n  }\n  update(props) {\n    each(this.current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)));\n    return this;\n  }\n  add(ctrl) {\n    if (!this.current.includes(ctrl)) {\n      this.current.push(ctrl);\n    }\n  }\n  delete(ctrl) {\n    const i = this.current.indexOf(ctrl);\n    if (~i)\n      this.current.splice(i, 1);\n  }\n  _getProps(arg, ctrl, index) {\n    return is.fun(arg) ? arg(index, ctrl) : arg;\n  }\n}\neach([\"stop\", \"pause\", \"resume\"], (key) => {\n  SpringRef.prototype[key] = function() {\n    each(this.current, (ctrl) => ctrl[key](...arguments));\n    return this;\n  };\n});\n\nfunction useSprings(length, props, deps) {\n  const propsFn = is.fun(props) && props;\n  if (propsFn && !deps)\n    deps = [];\n  const ref = useMemo(() => propsFn || arguments.length == 3 ? new SpringRef() : void 0, []);\n  const layoutId = useRef(0);\n  const forceUpdate = useForceUpdate();\n  const state = useMemo(() => ({\n    ctrls: [],\n    queue: [],\n    flush(ctrl, updates2) {\n      const springs2 = getSprings(ctrl, updates2);\n      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);\n      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {\n        setSprings(ctrl, springs2);\n        state.queue.push(() => {\n          resolve(flushUpdateQueue(ctrl, updates2));\n        });\n        forceUpdate();\n      });\n    }\n  }), []);\n  const ctrls = [...state.ctrls];\n  const updates = [];\n  const prevLength = usePrev(length) || 0;\n  const oldCtrls = ctrls.slice(length, prevLength);\n  useMemo(() => {\n    ctrls.length = length;\n    declareUpdates(prevLength, length);\n  }, [length]);\n  useMemo(() => {\n    declareUpdates(0, Math.min(prevLength, length));\n  }, deps);\n  function declareUpdates(startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; i++) {\n      const ctrl = ctrls[i] || (ctrls[i] = new Controller(null, state.flush));\n      const update = propsFn ? propsFn(i, ctrl) : props[i];\n      if (update) {\n        updates[i] = declareUpdate(update);\n      }\n    }\n  }\n  const springs = ctrls.map((ctrl, i) => getSprings(ctrl, updates[i]));\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    layoutId.current++;\n    state.ctrls = ctrls;\n    const {queue} = state;\n    if (queue.length) {\n      state.queue = [];\n      each(queue, (cb) => cb());\n    }\n    each(oldCtrls, (ctrl) => {\n      detachRefs(ctrl, ref);\n      ctrl.stop(true);\n    });\n    each(ctrls, (ctrl, i) => {\n      const values2 = springs[i];\n      setSprings(ctrl, values2);\n      ref == null ? void 0 : ref.add(ctrl);\n      if (hasContext) {\n        ctrl.start({default: context});\n      }\n      const update = updates[i];\n      if (update) {\n        replaceRef(ctrl, update.ref);\n        if (ctrl.ref) {\n          ctrl.queue.push(update);\n        } else {\n          ctrl.start(update);\n        }\n      }\n    });\n  });\n  useOnce(() => () => {\n    each(state.ctrls, (ctrl) => ctrl.stop(true));\n  });\n  const values = springs.map((x) => ({...x}));\n  return ref ? [values, ref] : values;\n}\n\nfunction useSpring(props, deps) {\n  const isFn = is.fun(props);\n  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);\n  return isFn || arguments.length == 2 ? [values, ref] : values;\n}\n\nconst initSpringRef = () => new SpringRef();\nconst useSpringRef = () => useState(initSpringRef)[0];\n\nfunction useTrail(length, propsArg, deps) {\n  const propsFn = is.fun(propsArg) && propsArg;\n  if (propsFn && !deps)\n    deps = [];\n  let reverse = true;\n  const result = useSprings(length, (i, ctrl) => {\n    const props = propsFn ? propsFn(i, ctrl) : propsArg;\n    reverse = reverse && props.reverse;\n    return props;\n  }, deps || [{}]);\n  const ref = result[1];\n  useLayoutEffect(() => {\n    each(ref.current, (ctrl, i) => {\n      const parent = ref.current[i + (reverse ? 1 : -1)];\n      if (parent)\n        ctrl.start({to: parent.springs});\n    });\n  }, deps);\n  if (propsFn || arguments.length == 3) {\n    ref[\"_getProps\"] = (propsArg2, ctrl, i) => {\n      const props = is.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;\n      if (props) {\n        const parent = ref.current[i + (props.reverse ? 1 : -1)];\n        if (parent)\n          props.to = parent.springs;\n        return props;\n      }\n    };\n    return result;\n  }\n  return result[0];\n}\n\nconst MOUNT = \"mount\";\nconst ENTER = \"enter\";\nconst UPDATE = \"update\";\nconst LEAVE = \"leave\";\n\nfunction useTransition(data, props, deps) {\n  const {reset, sort, trail = 0, expires = true, onDestroyed} = props;\n  const ref = useMemo(() => arguments.length == 3 ? new SpringRef() : void 0, []);\n  const items = toArray(data);\n  const transitions = [];\n  const usedTransitions = useRef(null);\n  const prevTransitions = reset ? null : usedTransitions.current;\n  useLayoutEffect(() => {\n    usedTransitions.current = transitions;\n  });\n  useOnce(() => () => each(usedTransitions.current, (t) => {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n    }\n    detachRefs(t.ctrl, ref);\n    t.ctrl.stop(true);\n  }));\n  const keys = getKeys(items, props, prevTransitions);\n  const expired = reset && usedTransitions.current || [];\n  useLayoutEffect(() => each(expired, ({ctrl, item, key}) => {\n    detachRefs(ctrl, ref);\n    callProp(onDestroyed, item, key);\n  }));\n  const reused = [];\n  if (prevTransitions)\n    each(prevTransitions, (t, i) => {\n      if (t.expired) {\n        clearTimeout(t.expirationId);\n        expired.push(t);\n      } else {\n        i = reused[i] = keys.indexOf(t.key);\n        if (~i)\n          transitions[i] = t;\n      }\n    });\n  each(items, (item, i) => {\n    transitions[i] || (transitions[i] = {\n      key: keys[i],\n      item,\n      phase: MOUNT,\n      ctrl: new Controller()\n    });\n  });\n  if (reused.length) {\n    let i = -1;\n    each(reused, (keyIndex, prevIndex) => {\n      const t = prevTransitions[prevIndex];\n      if (~keyIndex) {\n        i = transitions.indexOf(t);\n        transitions[i] = {...t, item: items[keyIndex]};\n      } else if (props.leave) {\n        transitions.splice(++i, 0, t);\n      }\n    });\n  }\n  if (is.fun(sort)) {\n    transitions.sort((a, b) => sort(a.item, b.item));\n  }\n  let delay = -trail;\n  const forceUpdate = useForceUpdate();\n  const defaultProps = getDefaultProps(props);\n  const changes = new Map();\n  each(transitions, (t, i) => {\n    const key = t.key;\n    const prevPhase = t.phase;\n    let to;\n    let phase;\n    if (prevPhase == MOUNT) {\n      to = props.enter;\n      phase = ENTER;\n    } else {\n      const isLeave = keys.indexOf(key) < 0;\n      if (prevPhase != LEAVE) {\n        if (isLeave) {\n          to = props.leave;\n          phase = LEAVE;\n        } else if (to = props.update) {\n          phase = UPDATE;\n        } else\n          return;\n      } else if (!isLeave) {\n        to = props.enter;\n        phase = ENTER;\n      } else\n        return;\n    }\n    to = callProp(to, t.item, i);\n    to = is.obj(to) ? inferTo(to) : {to};\n    if (!to.config) {\n      const config = props.config || defaultProps.config;\n      to.config = callProp(config, t.item, i);\n    }\n    const payload = {\n      ...defaultProps,\n      delay: delay += trail,\n      reset: false,\n      ...to\n    };\n    if (phase == ENTER && is.und(payload.from)) {\n      const from = is.und(props.initial) || prevTransitions ? props.from : props.initial;\n      payload.from = callProp(from, t.item, i);\n    }\n    const {onResolve} = payload;\n    payload.onResolve = (result) => {\n      callProp(onResolve, result);\n      const transitions2 = usedTransitions.current;\n      const t2 = transitions2.find((t3) => t3.key === key);\n      if (!t2)\n        return;\n      if (result.cancelled && t2.phase != UPDATE) {\n        t2.phase = prevPhase;\n        return;\n      }\n      if (t2.ctrl.idle) {\n        const idle = transitions2.every((t3) => t3.ctrl.idle);\n        if (t2.phase == LEAVE) {\n          const expiry = callProp(expires, t2.item);\n          if (expiry !== false) {\n            const expiryMs = expiry === true ? 0 : expiry;\n            t2.expired = true;\n            if (!idle && expiryMs > 0) {\n              if (expiryMs <= 2147483647)\n                t2.expirationId = setTimeout(forceUpdate, expiryMs);\n              return;\n            }\n          }\n        }\n        if (idle && transitions2.some((t3) => t3.expired)) {\n          forceUpdate();\n        }\n      }\n    };\n    const springs = getSprings(t.ctrl, payload);\n    changes.set(t, {phase, springs, payload});\n  });\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    if (hasContext)\n      each(transitions, (t) => {\n        t.ctrl.start({default: context});\n      });\n  }, [context]);\n  useLayoutEffect(() => {\n    each(changes, ({phase, springs, payload}, t) => {\n      const {ctrl} = t;\n      t.phase = phase;\n      ref == null ? void 0 : ref.add(ctrl);\n      replaceRef(ctrl, payload.ref);\n      setSprings(ctrl, springs);\n      if (hasContext && phase == ENTER) {\n        ctrl.start({default: context});\n      }\n      ctrl[ctrl.ref ? \"update\" : \"start\"](payload);\n    });\n  }, reset ? void 0 : deps);\n  const renderTransitions = (render) => /* @__PURE__ */ createElement(Fragment, null, transitions.map((t, i) => {\n    const {springs} = changes.get(t) || t.ctrl;\n    const elem = render({...springs}, t.item, t, i);\n    return elem && elem.type ? /* @__PURE__ */ createElement(elem.type, {\n      ...elem.props,\n      key: is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id,\n      ref: elem.ref\n    }) : elem;\n  }));\n  return ref ? [renderTransitions, ref] : renderTransitions;\n}\nlet nextKey = 1;\nfunction getKeys(items, {key, keys = key}, prevTransitions) {\n  if (keys === null) {\n    const reused = new Set();\n    return items.map((item) => {\n      const t = prevTransitions && prevTransitions.find((t2) => t2.item === item && t2.phase !== LEAVE && !reused.has(t2));\n      if (t) {\n        reused.add(t);\n        return t.key;\n      }\n      return nextKey++;\n    });\n  }\n  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);\n}\n\nfunction Spring({children, ...props}) {\n  return children(useSpring(props));\n}\n\nfunction Trail({\n  items,\n  children,\n  ...props\n}) {\n  const trails = useTrail(items.length, props);\n  return items.map((item, index) => {\n    const result = children(item, index);\n    return is.fun(result) ? result(trails[index]) : result;\n  });\n}\n\nfunction Transition({\n  items,\n  children,\n  ...props\n}) {\n  return useTransition(items, props)(children);\n}\n\nclass Interpolation extends FrameValue {\n  constructor(source, args) {\n    super();\n    this.source = source;\n    this.idle = true;\n    this._active = new Set();\n    this.calc = createInterpolator(...args);\n    const value = this._get();\n    const nodeType = getAnimatedType(value);\n    setAnimated(this, nodeType.create(value));\n  }\n  advance(_dt) {\n    const value = this._get();\n    const oldValue = this.get();\n    if (!isEqual(value, oldValue)) {\n      getAnimated(this).setValue(value);\n      this._onChange(value, this.idle);\n    }\n    if (!this.idle && checkIdle(this._active)) {\n      becomeIdle(this);\n    }\n  }\n  _get() {\n    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));\n    return this.calc(...inputs);\n  }\n  _start() {\n    if (this.idle && !checkIdle(this._active)) {\n      this.idle = false;\n      each(getPayload(this), (node) => {\n        node.done = false;\n      });\n      if (Globals.skipAnimation) {\n        raf.batchedUpdates(() => this.advance());\n        becomeIdle(this);\n      } else {\n        frameLoop.start(this);\n      }\n    }\n  }\n  _attach() {\n    let priority = 1;\n    each(toArray(this.source), (source) => {\n      if (hasFluidValue(source)) {\n        addFluidObserver(source, this);\n      }\n      if (isFrameValue(source)) {\n        if (!source.idle) {\n          this._active.add(source);\n        }\n        priority = Math.max(priority, source.priority + 1);\n      }\n    });\n    this.priority = priority;\n    this._start();\n  }\n  _detach() {\n    each(toArray(this.source), (source) => {\n      if (hasFluidValue(source)) {\n        removeFluidObserver(source, this);\n      }\n    });\n    this._active.clear();\n    becomeIdle(this);\n  }\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      if (event.idle) {\n        this.advance();\n      } else {\n        this._active.add(event.parent);\n        this._start();\n      }\n    } else if (event.type == \"idle\") {\n      this._active.delete(event.parent);\n    } else if (event.type == \"priority\") {\n      this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);\n    }\n  }\n}\nfunction isIdle(source) {\n  return source.idle !== false;\n}\nfunction checkIdle(active) {\n  return !active.size || Array.from(active).every(isIdle);\n}\nfunction becomeIdle(self) {\n  if (!self.idle) {\n    self.idle = true;\n    each(getPayload(self), (node) => {\n      node.done = true;\n    });\n    callFluidObservers(self, {\n      type: \"idle\",\n      parent: self\n    });\n  }\n}\n\nconst to = (source, ...args) => new Interpolation(source, args);\nconst interpolate = (source, ...args) => (deprecateInterpolate(), new Interpolation(source, args));\n\nGlobals.assign({\n  createStringInterpolator,\n  to: (source, args) => new Interpolation(source, args)\n});\nconst update = frameLoop.advance;\n\nexport { BailSignal, Controller, FrameValue, Interpolation, Spring, SpringContext, SpringRef, SpringValue, Trail, Transition, config, inferTo, interpolate, to, update, useChain, useSpring, useSpringRef, useSprings, useTrail, useTransition };\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"module"}